"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateLicenseFile = exports.isValidEol = void 0;
const getLicenseFileText_1 = require("./getLicenseFileText");
const file_utils_1 = require("./utils/file.utils");
const UTF8 = "utf-8";
function isValidEol(input) {
    return input === "windows" || input === "posix" || input === undefined;
}
exports.isValidEol = isValidEol;
/**
 * Scans the project found at the given path and creates a license file at the given output location
 * @param pathToPackageJson A path to the package.json for the project
 * @param outputPath A file path for the resulting license file
 * @optional @param lineEnding "windows" or "posix". Will use the system default if omitted
 */
function generateLicenseFile(pathToPackageJson, outputPath, lineEnding) {
    return __awaiter(this, void 0, void 0, function* () {
        const licenseFileText = yield getLicenseFileText_1.getLicenseFileText(pathToPackageJson, lineEnding);
        yield file_utils_1.writeFileAsync(outputPath, licenseFileText, { encoding: UTF8 });
    });
}
exports.generateLicenseFile = generateLicenseFile;
