"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Output = void 0;
const file_utils_1 = require("../../utils/file.utils");
const argument_1 = require("./argument");
class Output extends argument_1.Argument {
    constructor() {
        super(...arguments);
        this.question = "Output location: ";
        this.initialValue = "3rd-party-licenses.txt";
    }
    resolve(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let output = args["--output"];
            let outputExists = output ? yield file_utils_1.doesFileExist(output) : false;
            let overwriteOutput = args["--overwrite"];
            while (!output || (outputExists && !overwriteOutput)) {
                if (!output) {
                    output = yield this.promptForString(this.question, this.initialValue);
                }
                outputExists = yield file_utils_1.doesFileExist(output);
                if (outputExists && overwriteOutput === undefined) {
                    overwriteOutput = yield this.promptForBoolean("This file already exists - do you want to overwrite it?");
                }
                if (outputExists && overwriteOutput === false) {
                    output = undefined;
                    overwriteOutput = undefined;
                }
            }
            return output;
        });
    }
}
exports.Output = Output;
