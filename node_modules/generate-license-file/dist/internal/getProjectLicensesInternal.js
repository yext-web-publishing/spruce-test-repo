"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectLicensesInternal = void 0;
const path_1 = __importDefault(require("path"));
const license_1 = require("../models/license");
const console_utils_1 = __importDefault(require("../utils/console.utils"));
const file_utils_1 = require("../utils/file.utils");
const license_utils_1 = require("../utils/license.utils");
const packageJson_utils_1 = require("../utils/packageJson.utils");
const UTF8 = "utf-8";
function getProjectLicensesInternal(pathToPackageJson) {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield file_utils_1.doesFolderExist(pathToPackageJson)) {
            console_utils_1.default.warn("WARNING: Using directories is deprecated and will be removed in version 2.0. Please pass in the full path to the package.json.");
            pathToPackageJson = path_1.default.join(pathToPackageJson, "package.json");
        }
        const dependencyLicenses = yield getDependencyMapForProject(pathToPackageJson);
        const licenses = flattenDependencyMapToLicenseArray(dependencyLicenses);
        return licenses;
    });
}
exports.getProjectLicensesInternal = getProjectLicensesInternal;
const getDependencyMapForProject = (pathToPackageJson) => __awaiter(void 0, void 0, void 0, function* () {
    const directoryOfPackageJson = path_1.default.dirname(pathToPackageJson);
    const currentProjectIdentifier = yield getCurrentProjectIdentifier(pathToPackageJson);
    const project = yield license_utils_1.getProject({
        start: directoryOfPackageJson,
        production: true,
        excludePackages: currentProjectIdentifier
    });
    const projectDependencies = groupProjectDependenciesByLicenseText(project);
    return projectDependencies;
});
const groupProjectDependenciesByLicenseText = (project) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const dependencyLicenses = new Map();
    for (const [dependencyName, dependencyValue] of Object.entries(project)) {
        const license = yield getLicenseContent(dependencyValue);
        const listForLicense = (_a = dependencyLicenses.get(license)) !== null && _a !== void 0 ? _a : [];
        listForLicense.push(dependencyName);
        dependencyLicenses.set(license, listForLicense);
    }
    return dependencyLicenses;
});
const getLicenseContent = (moduleInfo) => __awaiter(void 0, void 0, void 0, function* () {
    const licenseFilePath = moduleInfo.licenseFile;
    if (!!licenseFilePath && (yield file_utils_1.doesFileExist(licenseFilePath))) {
        return yield file_utils_1.readFileAsync(licenseFilePath, { encoding: UTF8 });
    }
    return getLicenseType(moduleInfo);
});
const getLicenseType = (moduleInfo) => {
    const { licenses } = moduleInfo;
    if (!!licenses && licenses.length > 0) {
        const licenseType = typeof licenses === "string" ? licenses : licenses[0];
        return `(${licenseType})`;
    }
    console_utils_1.default.warn(`No license found for ${moduleInfo.name}!`);
    return "Unknown license!";
};
const flattenDependencyMapToLicenseArray = (dependencyLicenses) => {
    const licenses = [];
    for (const [license, dependencies] of dependencyLicenses) {
        licenses.push(new license_1.License(license, dependencies));
    }
    return licenses;
};
const getCurrentProjectIdentifier = (pathToPackageJson) => __awaiter(void 0, void 0, void 0, function* () {
    const { name, version } = yield packageJson_utils_1.readPackageJson(pathToPackageJson);
    if (!name) {
        throw new Error('Cannot find the "name" key in the package.json!');
    }
    if (!version) {
        throw new Error('Cannot find the "version" key in the package.json!');
    }
    const currentProjectIdentifier = `${name}@${version}`;
    return currentProjectIdentifier;
});
