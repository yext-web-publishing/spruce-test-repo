"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLicenseFileText = void 0;
const os = __importStar(require("os"));
const getProjectLicensesInternal_1 = require("./internal/getProjectLicensesInternal");
const SUFFIX = "-----------";
const FOOTER = "This file was generated with generate-license-file! https://www.npmjs.com/package/generate-license-file";
/**
 * Scans the project found at the given path and returns a string containing the licenses for all the dependencies
 * @param pathToPackageJson A path to the package.json for the project
 * @optional @param lineEnding "windows" or "posix". Will use the system default if omitted
 * @returns A promise that resolves to the license file text
 */
function getLicenseFileText(pathToPackageJson, lineEnding) {
    return __awaiter(this, void 0, void 0, function* () {
        const EOL = getLineEnding(lineEnding);
        const licenses = yield getProjectLicensesInternal_1.getProjectLicensesInternal(pathToPackageJson);
        let licenseFile = "";
        for (const license of licenses) {
            licenseFile += license.format(EOL) + EOL + EOL + SUFFIX + EOL + EOL;
        }
        licenseFile += FOOTER + EOL;
        return licenseFile;
    });
}
exports.getLicenseFileText = getLicenseFileText;
function getLineEnding(lineEndings) {
    switch (lineEndings) {
        case "windows":
            return "\r\n";
        case "posix":
            return "\n";
        default:
            return os.EOL;
    }
}
