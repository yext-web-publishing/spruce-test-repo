import { globSync } from "glob";
import path from "path";
import { convertToPosixPath } from "../../template/paths.js";
import { readdirSync } from "fs";
import { getReactVersion } from "../../template/internal/util.js";
import { fileURLToPath } from "url";
const getModuleFilepaths = (paths) => {
  const moduleFilePaths = [];
  const addedFilenames = /* @__PURE__ */ new Set();
  paths.forEach((p) => {
    readdirSync(p.getAbsolutePath(), { withFileTypes: true }).filter((dir) => dir.isDirectory()).map((dir) => dir.name).forEach((dir) => {
      const filePaths = globSync(
        convertToPosixPath(`${p.getAbsolutePath()}/${dir}/*.tsx`)
      );
      if (filePaths.length != 1) {
        console.error(
          `Multiple or no source files found for module "${dir}". There must be one .tsx file per module.`
        );
      }
      const filePath = filePaths[0];
      const fileName = path.basename(filePath);
      if (!addedFilenames.has(fileName)) {
        addedFilenames.add(fileName);
        moduleFilePaths.push(filePath);
      }
    });
  });
  return moduleFilePaths;
};
const getModuleFilepathsFromProjectStructure = (projectStructure) => {
  return getModuleFilepaths(projectStructure.getModulePaths());
};
const globalClientRenderFilename17 = "_client17.tsx";
const globalClientRenderFilename = "_client.tsx";
const globalServerRenderFilename = "_server.tsx";
const getGlobalClientServerRenderModules = () => {
  const shouldUseReactRoot = getReactVersion() >= 18;
  const clientRenderModulePath = findGlobalRenderFile(
    shouldUseReactRoot ? globalClientRenderFilename : globalClientRenderFilename17
  );
  const serverRenderModulePath = findGlobalRenderFile(
    globalServerRenderFilename
  );
  return {
    clientRenderModulePath,
    serverRenderModulePath
  };
};
const findGlobalRenderFile = (defaultFilename) => {
  const __filename = fileURLToPath(import.meta.url);
  const __dirname = path.dirname(__filename);
  return path.join(__dirname, defaultFilename.split(".")[0] + ".js");
};
export {
  getGlobalClientServerRenderModules,
  getModuleFilepaths,
  getModuleFilepathsFromProjectStructure
};
