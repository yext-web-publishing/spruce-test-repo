import {
  convertStreamToStreamInternal,
  parse
} from "../../template/internal/types.js";
import { validateRedirectModuleInternal } from "./validateRedirectModuleInternal.js";
const convertRedirectModuleToRedirectModuleInternal = (redirectFilepath, redirectModule, adjustForFingerprintedAsset) => {
  const redirectPath = parse(redirectFilepath, adjustForFingerprintedAsset);
  const redirectModuleInternal = {
    ...redirectModule,
    config: convertRedirectConfigToRedirectConfigInternal(
      redirectPath.name,
      redirectModule.config
    ),
    path: redirectFilepath,
    filename: redirectPath.base,
    redirectName: redirectPath.name
  };
  validateRedirectModuleInternal(redirectModuleInternal);
  return redirectModuleInternal;
};
const convertRedirectConfigToRedirectConfigInternal = (redirectName, redirectConfig) => {
  const stream = convertStreamToStreamInternal(redirectConfig?.stream);
  return {
    name: redirectConfig?.name ?? redirectName,
    ...redirectConfig,
    stream
  };
};
export {
  convertRedirectConfigToRedirectConfigInternal,
  convertRedirectModuleToRedirectModuleInternal
};
