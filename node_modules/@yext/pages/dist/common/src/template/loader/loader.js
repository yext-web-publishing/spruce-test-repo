import {
  convertTemplateModuleToTemplateModuleInternal
} from "../internal/types.js";
import { loadModules } from "../../loader/vite.js";
import { loadViteModule } from "../../../../dev/server/ssr/loadViteModule.js";
const loadTemplateModules = async (templateModulePaths, transpile, adjustForFingerprintedAsset, projectStructure) => {
  const importedModules = await loadModules(
    templateModulePaths,
    transpile,
    projectStructure
  );
  const importedTemplateModules = [];
  for (const importedModule of importedModules) {
    const templateModuleInternal = convertTemplateModuleToTemplateModuleInternal(
      importedModule.path,
      importedModule.module,
      adjustForFingerprintedAsset
    );
    importedTemplateModules.push({
      ...templateModuleInternal,
      path: importedModule.path
    });
  }
  return importedTemplateModules.reduce((prev, module) => {
    if (prev.has(module.config.name)) {
      throw new Error(
        `Templates must have unique feature names. Found multiple modules with "${module.config.name}"`
      );
    }
    return prev.set(module.config.name, module);
  }, /* @__PURE__ */ new Map());
};
const loadTemplateModuleCollectionUsingVite = async (vite, templateFilepaths) => {
  const templateModules = await Promise.all(
    templateFilepaths.map(async (templateFilepath) => {
      const templateModule = await loadViteModule(
        vite,
        templateFilepath
      );
      return convertTemplateModuleToTemplateModuleInternal(
        templateFilepath,
        templateModule,
        false
      );
    })
  );
  return templateModules.reduce((prev, module) => {
    return prev.set(module.config.name, module);
  }, /* @__PURE__ */ new Map());
};
export {
  loadTemplateModuleCollectionUsingVite,
  loadTemplateModules
};
