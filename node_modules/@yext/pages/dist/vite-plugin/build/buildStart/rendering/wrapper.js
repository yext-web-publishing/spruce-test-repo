import { getLang } from "../../../../common/src/template/head.js";
import {
  getHydrationTemplate,
  getServerTemplatePlugin
} from "../../../../common/src/template/hydration.js";
import path from "node:path";
const reactWrapper = async (props, templateModuleInternal, hydrate, pluginRenderTemplates, manifest, projectStructure) => {
  if (!manifest) {
    throw new Error("Manifest is undefined");
  }
  const headConfig = templateModuleInternal.getHeadConfig ? templateModuleInternal.getHeadConfig(props) : void 0;
  const templateFilepath = path.join(
    projectStructure.getTemplatePaths()[0].path,
    `${templateModuleInternal.templateName}.tsx`
  );
  let clientHydrationString;
  if (hydrate) {
    clientHydrationString = getHydrationTemplate(
      pluginRenderTemplates.client,
      manifest.clientPaths[templateModuleInternal.templateName],
      props
    );
  }
  const serverHtml = await pluginRenderTemplates.server.render({
    Page: templateModuleInternal.default,
    pageProps: props
  });
  const html = pluginRenderTemplates.server.indexHtml.replace(
    pluginRenderTemplates.server.replacementTag,
    serverHtml
  );
  const clientInjectedServerHtml = getServerTemplatePlugin(
    clientHydrationString,
    html,
    templateFilepath,
    manifest.bundlerManifest,
    getLang(headConfig, props),
    headConfig
  );
  return clientInjectedServerHtml;
};
export {
  reactWrapper
};
