import {
  getLocalDataManifest
} from "../ssr/getLocalData.js";
import index from "../public/index.js";
import {
  dynamicModeInfoText,
  localDevUrlInfoText,
  localDevUrlHelpText,
  localModeInfoText,
  noLocalDataErrorText,
  yextLogoWhiteSvg,
  webDevelopmentIconBlackSvg,
  externalLinkSvg
} from "./constants.js";
import { getTemplateFilepathsFromProjectStructure } from "../../../common/src/template/internal/getTemplateFilepaths.js";
import { loadFunctions } from "../../../common/src/function/internal/loader.js";
import { parseYextrcContents } from "../../../util/yextrcContents.js";
import { getPartition } from "../../../util/partition.js";
import { getYextUrlForPartition } from "../../../util/url.js";
import path from "node:path";
import { logWarning } from "../../../util/logError.js";
const indexPage = ({
  vite,
  dynamicGenerateData,
  useProdURLs,
  projectStructure,
  devServerPort
}) => async (_req, res, next) => {
  try {
    let accountLink = "";
    const { accountId, universe } = parseYextrcContents();
    if (accountId !== void 0 && universe !== void 0) {
      const partition = getPartition(Number(accountId));
      const accountUrl = `https://${getYextUrlForPartition(
        universe,
        partition
      )}/s/${accountId}/`;
      accountLink = `
          <span class="link-container">
            <a target="_blank" rel="noopener noreferrer" href="${accountUrl}">
              Yext Account
            </a>
            ${externalLinkSvg}
          </span>
        `;
    }
    const templateFilepaths = getTemplateFilepathsFromProjectStructure(projectStructure);
    const localDataManifest = await getLocalDataManifest(
      vite,
      templateFilepaths
    );
    let indexPageHtml = index.replace(
      `<!--header-html-->`,
      `
        <div class="header">
          ${yextLogoWhiteSvg}
          <h1>Pages Development</h1>
          <h4 class="external-links">
            ${accountLink}
            <span class="link-container">
              <a target="_blank" rel="noopener noreferrer" href="https://hitchhikers.yext.com/docs/pages/super-quick-start/">
                Documentation
              </a>
              ${externalLinkSvg}
            </span>
          </h4>
        </div>
        `
    );
    indexPageHtml = indexPageHtml.replace(
      `<!--sidebar-html-->`,
      `<div class="sidebar">
          ${webDevelopmentIconBlackSvg}
          ${getInfoMessage(dynamicGenerateData, useProdURLs)}
        </div>`
    );
    if (localDataManifest.static.size + localDataManifest.entity.size) {
      if (localDataManifest.static.size) {
        indexPageHtml = indexPageHtml.replace(
          `<!--static-pages-html-->`,
          `<h3>Static Pages</h3>
            ${createStaticPageListItems(
            localDataManifest,
            useProdURLs,
            devServerPort
          )}`
        );
      }
      if (Array.from(localDataManifest.entity.keys()).length) {
        indexPageHtml = indexPageHtml.replace(
          `<!--entity-pages-html-->`,
          `<h3>Entity Pages</h3>
            <div class="list">
          ${Array.from(localDataManifest.entity.keys()).reduce(
            (templateAccumulator, templateName) => templateAccumulator + `<h4>
                ${templateName}
                pages (${(localDataManifest.entity.get(templateName)?.filter((d) => !useProdURLs || d.slug) || []).length}):
              </h4>
                <table>
                  <thead>
                    <tr>
                      <td>URL</td>
                      <td>Entity ID</td>
                    </tr>
                  </thead>
                  <tbody>
                    ${createEntityPageListItems(
              localDataManifest,
              templateName,
              useProdURLs,
              devServerPort
            )}
                  </tbody>
                </table>`,
            ""
          )}
          </div>`
        );
      }
    } else {
      indexPageHtml = indexPageHtml.replace(
        `<!--error-html-->`,
        `<div class="error">
           <i class="fa fa-times-circle"></i>
             <p>${noLocalDataErrorText}</p>
          </div>`
      );
    }
    const functionsList = [
      ...(await loadFunctions(
        path.join(
          projectStructure.config.rootFolders.source,
          projectStructure.config.subfolders.serverlessFunctions
        ),
        projectStructure
      )).values()
    ];
    indexPageHtml = createFunctionsTable(
      functionsList,
      indexPageHtml,
      devServerPort
    );
    res.status(200).set({ "Content-Type": "text/html" }).end(indexPageHtml);
  } catch (e) {
    next(e);
  }
};
const formatStaticLink = (useProdUrls, templateName, locale, slug) => {
  if (useProdUrls) {
    return slug;
  }
  const localeQuery = locale === "en" ? "" : `?locale=${locale}`;
  return templateName + localeQuery;
};
const createStaticPageListItems = (localDataManifest, useProdURLs, devServerPort) => {
  return Array.from(localDataManifest.static).reduce(
    (templateAccumulator, [, { featureName, pathToLocalesMap }]) => {
      return templateAccumulator + `<h4>${featureName} pages (${pathToLocalesMap.values.length}):</h4><table>
          <thead>
            <tr>
              <td>URL</td>
              <td>Locale</td>
            </tr>
          </thead>
          <tbody>
            ${[...pathToLocalesMap].map(
        ([path2, locales]) => locales.map((locale) => {
          const link = formatStaticLink(
            useProdURLs,
            featureName,
            locale,
            path2
          );
          return `
                  <tr>
                    <td>
                      <a href="http://localhost:${devServerPort}/${link}">
                        ${link}
                      </a>
                    </td>
                    <td>${locale}</td>
                  </tr>`;
        })
      )}
          </tbody>
        </table>`;
    },
    ""
  );
};
const formatEntityLink = (useProdUrls, templateName, entityId, locale, slug) => {
  if (useProdUrls) {
    return slug;
  }
  const localeQuery = locale === "en" ? "" : `?locale=${locale}`;
  return `${templateName}/${entityId}${localeQuery}`;
};
const createEntityPageListItems = (localDataManifest, templateName, useProdURLs, devServerPort) => {
  const { accountId, universe } = parseYextrcContents();
  const partition = getPartition(Number(accountId));
  const formatContentLink = (uid) => {
    if (accountId !== void 0 && universe !== void 0) {
      return `https://${getYextUrlForPartition(
        universe,
        partition
      )}/s/${accountId}/entity/edit?entityIds=${uid}`;
    }
    return;
  };
  const entities = localDataManifest.entity.get(templateName) || [];
  return entities.reduce(
    (entityAccumulator, { uid, entityId, slug, locale }) => {
      if (useProdURLs && !slug) {
        logWarning(
          `No document.slug found for entityId "${entityId}", no link will be rendered in the index page.`
        );
        return entityAccumulator;
      }
      const link = formatEntityLink(
        useProdURLs,
        templateName,
        entityId,
        locale,
        slug
      );
      return entityAccumulator + `<tr>
        <td>
          <a href="http://localhost:${devServerPort}/${link}">
            ${link}
           </a>
        </td>
        <td>
          ${accountId && universe ? `<a href="${formatContentLink(uid)}">${entityId}</a>` : entityId}
        </td>
    </tr>`;
    },
    ""
  );
};
const getInfoMessage = (isDynamic, isProdUrl) => {
  if (isDynamic && isProdUrl) {
    return `<ul>
        <li>${dynamicModeInfoText}</li>
        <li>${localDevUrlInfoText}</li>
        <li>${localDevUrlHelpText}</li>
      <ul>`;
  }
  if (isDynamic) {
    return dynamicModeInfoText;
  }
  return `<p>${localModeInfoText}</p>`;
};
const createFunctionsTable = (functionsList, indexPageHtml, devServerPort) => {
  if (functionsList.length > 0) {
    return indexPageHtml.replace(
      "<!--functions-html-->",
      `
          <h3>Functions</h3>
          <table>
            <thead>
              <tr>
                <td>URL</td>
                 <td>Function Type</td>
              </tr>
            </thead>
            <tbody>
              ${functionsList.reduce((previous, func) => {
        return previous + `
                  <tr>
                    <td>
                      ${func.config.event === "API" ? `<a href="http://localhost:${devServerPort}/${func.slug.dev}">
                          ${func.slug.original}                 
                        </a>` : func.slug.dev}
                    </td>
                    <td>
                      ${func.config.event}
                    </td>
                  </tr>
                `;
      }, "")}
            </tbody>
          </table>
        `
    );
  }
  return indexPageHtml;
};
export {
  indexPage
};
