import { getGlobalClientServerRenderModules } from "../../../common/src/module/internal/getModuleFilepaths.js";
import {
  getHydrationModuleDev,
  getIndexModuleDev
} from "../../../common/src/module/hydration.js";
async function serveModule(res, moduleInternal, vite, pathname) {
  const clientServerRenderModules = getGlobalClientServerRenderModules();
  const clientHydrationString = getHydrationModuleDev(
    clientServerRenderModules.clientRenderModulePath,
    moduleInternal.path
  );
  const serverRenderTemplateModule = await vite.ssrLoadModule(
    clientServerRenderModules.serverRenderModulePath
  );
  const clientInjectedIndexHtml = getIndexModuleDev(
    clientHydrationString,
    serverRenderTemplateModule.indexHtml
  );
  const transformedIndexHtml = await vite.transformIndexHtml(
    // Vite decodes request urls when caching proxy requests, so we have to
    // load the transform request with a decoded uri. Additionally, we add
    // a date to cache bust the module path so that props are updated upon
    // page refresh, otherwise Vite caches it.
    decodeURIComponent(pathname) + Date.now(),
    clientInjectedIndexHtml
  );
  const getServerHtml = async () => {
    return await serverRenderTemplateModule.render({
      Page: moduleInternal.default
    });
  };
  const html = transformedIndexHtml.replace(
    serverRenderTemplateModule.replacementTag,
    await getServerHtml()
  );
  res.status(200).type("text/html").end(html);
}
export {
  serveModule as default
};
