import { propsLoader } from "../ssr/propsLoader.js";
import {
  parseAsStaticUrl,
  parseAsEntityUrl,
  getLocaleFromUrl
} from "../ssr/parseNonProdUrl.js";
import { findTemplateModuleInternal } from "../ssr/findTemplateModuleInternal.js";
import { getTemplateFilepathsFromProjectStructure } from "../../../common/src/template/internal/getTemplateFilepaths.js";
import sendAppHTML from "./sendAppHTML.js";
import { convertTemplateConfigInternalToFeaturesConfig } from "../../../common/src/feature/features.js";
import { generateTestDataForPage } from "../ssr/generateTestData.js";
import { entityPageCriterion, getLocalData } from "../ssr/getLocalData.js";
import { findStaticTemplateModuleAndDocByTemplateName } from "../ssr/findMatchingStaticTemplate.js";
import send404 from "./send404.js";
const serverRenderRoute = ({ vite, dynamicGenerateData, projectStructure }) => async (req, res, next) => {
  try {
    const url = new URL("http://" + req.headers.host + req.originalUrl);
    const locale = getLocaleFromUrl(url) ?? "en";
    const templateFilepaths = getTemplateFilepathsFromProjectStructure(projectStructure);
    const { staticURL } = parseAsStaticUrl(url);
    const staticTemplateAndProps = await findStaticTemplateModuleAndDocByTemplateName(
      vite,
      templateFilepaths,
      staticURL,
      locale
    );
    if (staticTemplateAndProps) {
      await sendAppHTML(
        res,
        staticTemplateAndProps.staticTemplateModuleInternal,
        staticTemplateAndProps.props,
        vite,
        req.originalUrl,
        projectStructure
      );
      return;
    }
    const { feature, entityId } = parseAsEntityUrl(url);
    if (!entityId || !feature) {
      send404(res, `Cannot find template with URL "${url}"`);
      return;
    }
    const templateModuleInternal = await findTemplateModuleInternal(
      vite,
      async (t) => feature === t.config.name,
      templateFilepaths
    );
    if (!templateModuleInternal) {
      send404(
        res,
        `Cannot find template corresponding to feature: ${feature}`
      );
      return;
    }
    const document = await getDocument(
      dynamicGenerateData,
      templateModuleInternal,
      entityId,
      locale,
      projectStructure
    );
    if (!document) {
      send404(
        res,
        `Cannot find document document data for entityId and locale: ${entityId} ${locale}`
      );
      return;
    }
    const props = await propsLoader({
      templateModuleInternal,
      document
    });
    await sendAppHTML(
      res,
      templateModuleInternal,
      props,
      vite,
      req.originalUrl,
      projectStructure
    );
  } catch (e) {
    next(e);
  }
};
const getDocument = async (dynamicGenerateData, templateModuleInternal, entityId, locale, projectStructure) => {
  if (dynamicGenerateData) {
    const featuresConfig = convertTemplateConfigInternalToFeaturesConfig(
      templateModuleInternal.config
    );
    return generateTestDataForPage(
      process.stdout,
      featuresConfig,
      entityId,
      locale,
      projectStructure
    );
  }
  return getLocalData(
    entityPageCriterion(entityId, templateModuleInternal.config.name, locale)
  );
};
export {
  serverRenderRoute
};
