import { getLang } from "../../../common/src/template/head.js";
import { getContentType } from "./getContentType.js";
import { getGlobalClientServerRenderTemplates } from "../../../common/src/template/internal/getTemplateFilepaths.js";
import {
  getHydrationTemplateDev,
  getIndexTemplateDev
} from "../../../common/src/template/hydration.js";
async function sendAppHTML(res, templateModuleInternal, props, vite, pathname, projectStructure) {
  if (templateModuleInternal.render) {
    res.status(200).type(getContentType(templateModuleInternal, props)).end(templateModuleInternal.render(props));
    return;
  }
  const clientServerRenderTemplates = getGlobalClientServerRenderTemplates(
    projectStructure.getTemplatePaths()
  );
  const headConfig = templateModuleInternal.getHeadConfig ? templateModuleInternal.getHeadConfig(props) : void 0;
  const clientHydrationString = getHydrationTemplateDev(
    clientServerRenderTemplates.clientRenderTemplatePath,
    templateModuleInternal.path,
    props,
    templateModuleInternal.config.hydrate
  );
  const serverRenderTemplateModule = await vite.ssrLoadModule(
    clientServerRenderTemplates.serverRenderTemplatePath
  );
  const clientInjectedIndexHtml = getIndexTemplateDev(
    clientHydrationString,
    serverRenderTemplateModule.indexHtml,
    getLang(headConfig, props),
    headConfig
  );
  const transformedIndexHtml = await vite.transformIndexHtml(
    // Vite decodes request urls when caching proxy requests so we have to
    // load the transform request with a decoded uri. Additionally we add
    // a date to cache bust the module path so that props are updated upon
    // page refresh, otherwise Vite caches it.
    decodeURIComponent(pathname) + Date.now(),
    clientInjectedIndexHtml
  );
  const getServerHtml = async () => {
    return await serverRenderTemplateModule.render({
      Page: templateModuleInternal.default,
      pageProps: props
    });
  };
  const html = transformedIndexHtml.replace(
    serverRenderTemplateModule.replacementTag,
    await getServerHtml()
  );
  res.status(200).type(getContentType(templateModuleInternal, props)).end(html);
}
export {
  sendAppHTML as default
};
