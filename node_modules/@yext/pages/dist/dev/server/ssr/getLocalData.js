import path from "path";
import fs from "fs";
import { readdir } from "fs/promises";
import { validateGetPathValue } from "../../../common/src/template/internal/validateGetPathValue.js";
import { logWarning } from "../../../util/logError.js";
import { loadTemplateModuleCollectionUsingVite } from "../../../common/src/template/loader/loader.js";
const LOCAL_DATA_PATH = "localData";
const getLocalDataManifest = async (vite, templateFilepaths) => {
  const localDataManifest = {
    static: /* @__PURE__ */ new Map(),
    entity: /* @__PURE__ */ new Map()
  };
  let dir;
  try {
    dir = await readdir(LOCAL_DATA_PATH);
  } catch (err) {
    if (err.code === "ENOENT") {
      return localDataManifest;
    } else {
      throw err;
    }
  }
  const templateModuleCollection = await loadTemplateModuleCollectionUsingVite(
    vite,
    templateFilepaths
  );
  const staticPaths = [];
  for (const fileName of dir) {
    const data = JSON.parse(
      fs.readFileSync(
        path.resolve(process.cwd(), `${LOCAL_DATA_PATH}/${fileName}`)
      ).toString()
    );
    const featureName = data.__?.name?.toString();
    if (!featureName) {
      continue;
    }
    const templateModuleInternal = templateModuleCollection.get(featureName);
    const uid = data.uid?.toString();
    const entityId = data.id?.toString();
    const slugField = templateModuleInternal?.config?.slugField;
    const slug = slugField ? data[slugField] : data.slug?.toString();
    const locale = data.locale?.toString();
    if (entityId) {
      localDataManifest.entity.set(featureName, [
        ...localDataManifest.entity.get(featureName) || [],
        { uid, entityId, slug, locale }
      ]);
    } else {
      if (!templateModuleInternal) {
        logWarning(
          `Could not find a static template for feature "${featureName}", skipping.`
        );
        continue;
      }
      const staticPath = templateModuleInternal.getPath({ document: data });
      if (staticPaths.includes(staticPath)) {
        throw new Error(
          `Path "${staticPath}" is used by multiple static pages.  Check that the getPath() function in the template "${templateModuleInternal.templateName}" returns a unique path for each locale.`
        );
      } else {
        try {
          staticPaths.push(staticPath);
          validateGetPathValue(staticPath, templateModuleInternal.path);
        } catch (e) {
          logWarning(`${e.message}, skipping."`);
          continue;
        }
        let pathToLocalesMap = localDataManifest.static.get(featureName)?.pathToLocalesMap;
        if (!pathToLocalesMap) {
          pathToLocalesMap = /* @__PURE__ */ new Map();
          pathToLocalesMap.set(staticPath, [data.meta.locale]);
        } else {
          const existingLocales = pathToLocalesMap.get(staticPath) || [];
          existingLocales?.push(data.meta.locale);
          pathToLocalesMap.set(staticPath, existingLocales);
        }
        localDataManifest.static.set(featureName, {
          featureName,
          pathToLocalesMap
        });
      }
    }
  }
  return localDataManifest;
};
const readLocalDataFile = async (localDataFilepath) => {
  try {
    return JSON.parse(
      fs.readFileSync(
        path.resolve(process.cwd(), `${LOCAL_DATA_PATH}/${localDataFilepath}`)
      ).toString()
    );
  } catch (err) {
    return;
  }
};
const getLocalData = async (criterion) => {
  try {
    const dir = await readdir(LOCAL_DATA_PATH);
    for (const fileName of dir) {
      const data = JSON.parse(
        fs.readFileSync(
          path.resolve(process.cwd(), `${LOCAL_DATA_PATH}/${fileName}`)
        ).toString()
      );
      if (criterion(data)) {
        return {
          localDataFilename: fileName,
          document: data
        };
      }
    }
  } catch (err) {
    if (err.code === "ENOENT") {
      throw "No localData exists. Please run `yext pages generate-test-data`";
    } else {
      throw err;
    }
  }
};
const getAllLocalData = async (criterion) => {
  try {
    const dir = await readdir(LOCAL_DATA_PATH);
    return dir.map((fileName) => {
      const data = JSON.parse(
        fs.readFileSync(
          path.resolve(process.cwd(), `${LOCAL_DATA_PATH}/${fileName}`)
        ).toString()
      );
      if (criterion(data)) {
        return {
          localDataFilename: fileName,
          document: data
        };
      }
      return {
        localDataFilename: "",
        document: void 0
      };
    }).filter((data) => data.document !== void 0);
  } catch (err) {
    if (err.code === "ENOENT") {
      throw "No localData exists. Please run `yext pages generate-test-data`";
    } else {
      throw err;
    }
  }
};
const staticPageCriterion = (featureName, locale) => {
  {
    return (data) => {
      if (!data.__) {
        return false;
      }
      return "staticPage" in data.__ && data.__.name === featureName && (locale ? data.locale === locale : true);
    };
  }
};
const entityPageCriterion = (entityId, featureName, locale) => {
  {
    return (data) => {
      if (!data.__) {
        return false;
      }
      return "entityPageSet" in data.__ && data.id === entityId && data.__.name === featureName && data.locale === locale;
    };
  }
};
const getLocalEntityPageDataForSlug = async (slug) => {
  const localDataForSlug = await getAllLocalData((data) => {
    if (!data.__) {
      return false;
    }
    return "entityPageSet" in data.__ && "id" in data && data.slug === slug;
  });
  if (localDataForSlug.length === 0) {
    throw new Error(`No localData files match slug: ${slug}`);
  } else if (localDataForSlug.length > 1) {
    throw new Error(
      `Multiple localData files match slug: ${slug}, expected only a single file`
    );
  }
  return localDataForSlug[0].document;
};
export {
  entityPageCriterion,
  getAllLocalData,
  getLocalData,
  getLocalDataManifest,
  getLocalEntityPageDataForSlug,
  readLocalDataFile,
  staticPageCriterion
};
