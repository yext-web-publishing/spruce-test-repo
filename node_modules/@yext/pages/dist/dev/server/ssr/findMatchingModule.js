import {
  convertModuleDefinitionToModuleInternal
} from "../../../common/src/module/internal/types.js";
import { loadViteModule } from "./loadViteModule.js";
import { getModuleFilepathsFromProjectStructure } from "../../../common/src/module/internal/getModuleFilepaths.js";
import { getModuleName } from "../../../common/src/module/internal/getModuleName.js";
import { createTsMorphProject } from "../../../common/src/parsers/sourceFileParser.js";
import path from "path";
import fs from "fs";
const loadModuleInternal = async (devserver, moduleFilePath) => {
  const moduleDefinition = await loadViteModule(
    devserver,
    moduleFilePath
  );
  return convertModuleDefinitionToModuleInternal(
    moduleFilePath,
    moduleDefinition
  );
};
const getModuleInfoFromModuleName = async (searchName, projectStructure) => {
  const moduleFilePaths = getModuleFilepathsFromProjectStructure(projectStructure);
  const project = createTsMorphProject();
  let moduleName = "";
  let modulePath = "";
  for (const moduleFilePath of moduleFilePaths) {
    project.addSourceFileAtPath(moduleFilePath);
    const thisModuleName = getModuleName(moduleFilePath);
    if (thisModuleName?.toLowerCase() === searchName.toLowerCase()) {
      moduleName = thisModuleName;
      modulePath = moduleFilePath;
      break;
    }
  }
  if (!modulePath || !moduleName) {
    for (const moduleFilePath of moduleFilePaths) {
      const folderName = moduleFilePath.split("/").slice(-2)[0];
      if (folderName.toLowerCase() === searchName.toLowerCase()) {
        project.addSourceFileAtPath(moduleFilePath);
        moduleName = getModuleName(moduleFilePath) || folderName;
        modulePath = moduleFilePath;
        break;
      }
    }
  }
  if (!modulePath || !moduleName) {
    console.error(`Could not find module for "${searchName}"`);
    return;
  }
  let postCssPath = path.resolve(
    modulePath,
    "../postcss.config.js"
  );
  if (!fs.existsSync(postCssPath)) {
    postCssPath = void 0;
  }
  return {
    moduleName,
    modulePath,
    postCssPath
  };
};
export {
  getModuleInfoFromModuleName,
  loadModuleInternal
};
