import {
  getAllLocalData,
  readLocalDataFile,
  staticPageCriterion
} from "./getLocalData.js";
import { propsLoader } from "./propsLoader.js";
import { loadTemplateModuleInternal } from "./findTemplateModuleInternal.js";
const slugToModuleAndLocalDataPaths = /* @__PURE__ */ new Map();
const findStaticTemplateModuleAndDocBySlug = async (devserver, templateFilepaths, useProdUrls, slug, locale) => {
  const resolvedSlug = useProdUrls ? slug : `${slug}/${locale}`;
  const moduleAndDocPaths = slugToModuleAndLocalDataPaths.get(resolvedSlug);
  if (moduleAndDocPaths) {
    if (!moduleAndDocPaths.isStatic) {
      return;
    }
    const templateModuleInternal = await loadTemplateModuleInternal(
      devserver,
      moduleAndDocPaths.templateFilePath
    );
    const document = await readLocalDataFile(
      moduleAndDocPaths.localDataFilename
    );
    const props = await propsLoader({
      templateModuleInternal,
      document
    });
    if (useProdUrls) {
      if (templateModuleInternal.getPath(props) === slug) {
        return {
          staticTemplateModuleInternal: templateModuleInternal,
          props
        };
      }
    } else {
      if (templateModuleInternal.config.name === slug) {
        return {
          staticTemplateModuleInternal: templateModuleInternal,
          props
        };
      }
    }
  }
  for (const templateFilepath of templateFilepaths) {
    const templateModuleInternal = await loadTemplateModuleInternal(
      devserver,
      templateFilepath
    );
    if (templateModuleInternal.config.templateType !== "static") {
      continue;
    }
    const localDatas = await getAllLocalData(
      staticPageCriterion(templateModuleInternal.config.name, locale)
    );
    for (const localData of localDatas) {
      const props = await propsLoader({
        templateModuleInternal,
        document: localData.document
      });
      slugToModuleAndLocalDataPaths.set(resolvedSlug, {
        templateFilePath: templateFilepath,
        localDataFilename: localData.localDataFilename,
        isStatic: true
      });
      if (useProdUrls) {
        if (templateModuleInternal.getPath(props) === slug) {
          return {
            staticTemplateModuleInternal: templateModuleInternal,
            props
          };
        }
      } else {
        if (templateModuleInternal.config.name === slug) {
          return {
            staticTemplateModuleInternal: templateModuleInternal,
            props
          };
        }
      }
    }
  }
  slugToModuleAndLocalDataPaths.set(resolvedSlug, {
    isStatic: false
  });
};
export {
  findStaticTemplateModuleAndDocBySlug
};
