import {
  getAllLocalData,
  getLocalData,
  staticPageCriterion
} from "./getLocalData.js";
import {
  convertTemplateModuleToTemplateModuleInternal
} from "../../../common/src/template/internal/types.js";
import { loadViteModule } from "./loadViteModule.js";
import { propsLoader } from "./propsLoader.js";
import { findTemplateModuleInternal } from "./findTemplateModuleInternal.js";
const findStaticTemplateModuleAndDocBySlug = async (devserver, templateFilepaths, slug) => {
  for (const templateFilepath of templateFilepaths) {
    const templateModule = await loadViteModule(
      devserver,
      templateFilepath
    );
    const templateModuleInternal = convertTemplateModuleToTemplateModuleInternal(
      templateFilepath,
      templateModule,
      false
    );
    if (templateModuleInternal.config.templateType !== "static") {
      continue;
    }
    const docs = await getAllLocalData(
      staticPageCriterion(templateModuleInternal.config.name)
    );
    for (const doc of docs) {
      const props = await propsLoader({
        templateModuleInternal,
        document: doc
      });
      if (templateModuleInternal.getPath(props) === slug) {
        return {
          staticTemplateModuleInternal: templateModuleInternal,
          props
        };
      }
    }
  }
};
const findStaticTemplateModuleAndDocByTemplateName = async (devserver, templateFilepaths, featureName, locale) => {
  const templateModuleInternal = await findTemplateModuleInternal(
    devserver,
    async (t) => t.config.templateType === "static" && featureName === t.config.name,
    templateFilepaths
  );
  if (!templateModuleInternal) {
    return;
  }
  const document = await getLocalData(staticPageCriterion(featureName, locale));
  if (!document) {
    return;
  }
  const props = await propsLoader({
    templateModuleInternal,
    document
  });
  return {
    staticTemplateModuleInternal: templateModuleInternal,
    props
  };
};
export {
  findStaticTemplateModuleAndDocBySlug,
  findStaticTemplateModuleAndDocByTemplateName
};
