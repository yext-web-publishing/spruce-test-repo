import {
  checkLegacyMarkdown,
  checkNodeVersion,
  installDependencies,
  removeFetchImport,
  updateDevDependencies,
  updatePackageEngines,
  updatePackageScripts,
  updatePagesJSToCurrentVersion,
  updateServerlessFunctionTypeReferences,
  updateToUsePagesComponents
} from "./pagesUpdater.js";
import { migrateConfigs } from "./migrateConfig.js";
import { ProjectStructure } from "../common/src/project/structure.js";
import path from "path";
const handler = async (args) => {
  const scoped = { scope: args.scope || "" };
  const projectStructure = await ProjectStructure.init(scoped);
  const source = path.resolve(projectStructure.config.rootFolders.source);
  checkNodeVersion();
  checkLegacyMarkdown(source);
  await updateDevDependencies();
  updatePackageScripts();
  updatePackageEngines();
  await updatePagesJSToCurrentVersion();
  removeFetchImport(source);
  await updateToUsePagesComponents(source);
  updateServerlessFunctionTypeReferences(
    path.resolve(source, projectStructure.config.subfolders.serverlessFunctions)
  );
  await installDependencies();
  if (!args.noMigration) {
    await migrateConfigs(projectStructure);
  }
};
const upgradeCommand = (program) => {
  program.command("upgrade").description("Upgrade repo to support the latest version of Pages").option(
    "--scope <string>",
    "The subfolder to scope the served templates from"
  ).option(
    "--noMigration",
    "Skip the migration to config.yaml and deletion of sites-config"
  ).action(handler);
};
export {
  upgradeCommand
};
