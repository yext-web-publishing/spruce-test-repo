import { ViteDevServer } from "vite";
import { TemplateModuleInternal } from "../../../common/src/template/internal/types.js";
import { TemplateRenderProps } from "../../../common/src/template/types.js";
export type StaticTemplateAndProps = {
    staticTemplateModuleInternal: TemplateModuleInternal<any, any>;
    props: TemplateRenderProps;
};
/**
 * Loops through all static templates. For each, finds all localData static files
 * matching the template's config.name, applies getPath with the template and document,
 * and checks if the getPath value matches the slug we're looking for. If found,
 * both the templateModuleInternal for the static template as well as the corresponding
 * transformed props are returned (so we don't need to find the document again). If no slugs
 * match then return undefined so that entity templates can be checked.
 *
 * This is to facilitate dynamic mode for static templates where locale is not a
 * query param.
 */
export declare const findStaticTemplateModuleAndDocBySlug: (devserver: ViteDevServer, templateFilepaths: string[], slug: string) => Promise<StaticTemplateAndProps | void>;
/**
 * Find the static template based on templateName (which comes from the local
 * url) as well as the corresponding localData document. If neither is found
 * returns undefined.
 */
export declare const findStaticTemplateModuleAndDocByTemplateName: (devserver: ViteDevServer, templateFilepaths: string[], featureName: string, locale: string) => Promise<StaticTemplateAndProps | void>;
