import { ViteDevServer } from "vite";
/**
 * LocalDataManifest contains data parsed out from the filesystem that is then used
 * to generate in the indexPage.
 */
export interface LocalDataManifest {
    static: Map<string, {
        featureName: string;
        pathToLocalesMap: Map<string, string[]>;
    }>;
    entity: Map<string, {
        uid: string;
        entityId: string;
        slug?: string;
        locale: string;
    }[]>;
}
export declare const getLocalDataManifest: (vite: ViteDevServer, templateFilepaths: string[]) => Promise<LocalDataManifest>;
/**
 * Reads through all localData and returns the first document that matches criterion.
 */
export declare const getLocalData: (criterion: (data: any) => boolean) => Promise<Record<string, any> | undefined>;
/**
 * Reads through all localData and returns all documents that match criterion.
 */
export declare const getAllLocalData: (criterion: (data: any) => boolean) => Promise<Record<string, any>[]>;
/**
 * A filter for finding localData for static templates. Can be used for both dynamic and
 * non-dynamic mode since static template data always comes from localData.
 *
 * @param featureName - the static template name
 * @param locale  - optional locale, required for non-dynamic mode
 * @returns
 */
export declare const staticPageCriterion: (featureName: string, locale?: string) => (data: any) => boolean;
/**
 * A filter for finding localData for entity templates. Should only be used for non-dynamic
 * mode.
 */
export declare const entityPageCriterion: (entityId: string, featureName: string, locale: string) => (data: any) => boolean;
export declare const getLocalEntityPageDataForSlug: (slug: string) => Promise<Record<string, any>>;
