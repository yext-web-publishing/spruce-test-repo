/**
 * Helper function to update a package dependency in package.json
 * @param packageName name of the package to update
 * @param version version to update to, if not supplied uses @latest
 * @param install whether to install the package if it does not exist
 */
export declare function updatePackageDependency(packageName: string, version: string | null, install?: boolean): Promise<void>;
/**
 * Update pages-components to the latest version and replace sites-components imports with
 * pages-components.
 * @param source the src folder
 */
export declare const updateToUsePagesComponents: (source: string) => Promise<void>;
/**
 * Update yext/pages to the version that is running
 */
export declare const updatePagesJSToCurrentVersion: () => Promise<void>;
/**
 * Updates vitejs/plugin-react and vite to specified versions
 */
export declare const updateDevDependencies: () => Promise<void>;
/**
 * Checks for legacy markdown and logs a warning if it is found
 * @param source the src folder
 */
export declare const checkLegacyMarkdown: (source: string) => void;
/**
 * Replaces imports for pages/components with pages-components
 * @param source the src folder
 * @return hasReplaced
 */
export declare const replacePagesSlashComponentsImports: (source: string) => boolean;
/**
 * Replaces imports for sites-components with pages-components
 * @param source the src folder
 * @return hasReplaced
 */
export declare const replaceSitesComponentsImports: (source: string) => boolean;
/**
 * Replaces imports for react-components with pages-components
 * @param source the src folder
 * @return hasReplaced
 */
export declare const replaceReactComponentsImports: (source: string) => boolean;
/**
 * Moves imports likes `import { GoogleMaps } from "@yext/components-tsx-maps";` to
 * `import { Map, GoogleMaps } from "@yext/pages-components";`.
 * Does the same for "@yext/components-tsx-geo".
 * @param source the src folder
 */
export declare const moveTsxMapsImportsToPagesComponents: (source: string) => boolean;
/**
 * Removes old fetch import that is no longer used
 * @param source the src folder
 */
export declare const removeFetchImport: (source: string) => void;
/**
 * Updates package scripts to include dev, prod, and build:local commands
 */
export declare const updatePackageScripts: () => void;
/**
 * Install dependencies using install command or npm, pnpm, or yarn install.
 */
export declare const installDependencies: () => Promise<void>;
/**
 * Update package engines to latest supported node versions.
 */
export declare const updatePackageEngines: () => void;
/**
 * Checks the version of node that is currently installed and logs an error if it is unsupported.
 */
export declare const checkNodeVersion: () => void;
/**
 * Updates the imports and usages of e.g. SitesHttpRequest to PagessHttpRequest.
 * @param serverlessFunctionsPath the path to the serverless functions folder
 */
export declare const updateServerlessFunctionTypeReferences: (serverlessFunctionsPath: string) => void;
