import * as React from "react";
export type DynamicOptions = {
    /** The exported component to use if it's a named export. Uses the "default" export otherwise. */
    componentName?: string;
    /** A function that returns a react element to display before the dynamic import is fully loaded. */
    loading?: () => React.JSX.Element;
};
/**
 * A component that will dynamically load an import, similar to React 18's lazy component. If no componentName
 * is set then "default" will be used. It also provides a loading state that is displayed before the
 * dynamic import is fully loaded.
 *
 * Example usage
 * ```
 * const MyMarkdown = dynamic(() => import("@yext/pages-components"), {componentName: "Markdown"});
 * <MyMarkdown content="my content" />
 *
 * const SliderComponent = dynamic(() => import("react-slick"), {
 *   loading: () => <h1>hi</h1>,
 * });
 * ```
 *
 * @param importComponent - A dynamic import function.
 * @param options - {@link DynamicOptions}
 * @returns
 */
export declare function dynamic(importComponent: () => Promise<any>, options?: DynamicOptions): {
    new (props: React.JSX.Element): {
        componentDidMount(): Promise<void>;
        render(): React.JSX.Element;
        context: unknown;
        setState<K extends string | number | symbol>(state: any, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<any>;
        state: Readonly<any>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<any>, nextState: Readonly<any>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<any>, prevState: Readonly<any>): any;
        componentDidUpdate?(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<any>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<any>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<any>, nextState: Readonly<any>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<any>, nextState: Readonly<any>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
