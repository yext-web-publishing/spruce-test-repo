import { TemplateModuleInternal } from "../../../../common/src/template/internal/types.js";
import { TemplateRenderProps, Manifest } from "../../../../common/src/template/types.js";
import { PluginRenderTemplates } from "./templateUtils.js";
import { ProjectStructure } from "../../../../common/src/project/structure.js";
export declare const reactWrapper: <T extends TemplateRenderProps<any>>(props: T, templateModuleInternal: TemplateModuleInternal<any, any>, hydrate: boolean, pluginRenderTemplates: PluginRenderTemplates, manifest: Manifest, projectStructure: ProjectStructure) => Promise<string | undefined>;
/**
 * Finds the original template path based on the template name and scope. If a scope is set it
 * first tries to find the scoped template, otherwise falls back to the root templates. Note that
 * a template of the same name cannot exist in the scoped folder and the root. The scope overrides
 * it.
 *
 * @param templateName
 * @param manifest
 */
export declare const findOriginalTemplatePathInManifest: (projectStructure: ProjectStructure, manifest: Manifest, templateName: string) => string | undefined;
