import { Project, ImportDeclarationStructure, OptionalKind, VariableDeclaration } from "ts-morph";
export declare function createTsMorphProject(): Project;
/**
 * Creates a SourceFileParser to use ts-morph functions.
 */
export default class SourceFileParser {
    private filepath;
    private sourceFile;
    constructor(filepath: string, project: Project);
    getFunctions(): import("ts-morph").FunctionDeclaration[];
    /**
     * getChildExpressions looks for expressions called within a parent expression.
     * @param parentExpressionName the expression to parse through
     * @param allChildExpressions an array to save parsed expression names into
     */
    getChildExpressions(parentExpressionName: string, allChildExpressions: string[]): void;
    /**
     * @param names the names of the expressions
     * @returns string[] containing code of each expression
     */
    getExpressionsByName(names: string[]): string[];
    /**
     * Ex. source file contains const foo = 5;
     * getExpressionByName("foo") returns "const foo = 5;"
     * @param name of expression
     * @returns string containing expression's code
     */
    getExpressionByName(name: string): string;
    /**
     * Adds any strings into source file.
     * @param expressions the strings to add
     */
    addExpressions(expressions: string[]): void;
    /**
     * getDefaultExport parses the source file for a default export.
     * @returns the default export's name
     */
    getDefaultExport(): string;
    /**
     * Adds the default export to source file.
     * @param defaultName the default export's name
     */
    addDefaultExport(defaultName: string): void;
    /**
     * @returns all imports from source file
     */
    getAllImports(): OptionalKind<ImportDeclarationStructure>[];
    /**
     * Adds the imports into source file.
     * @param allImports
     */
    setAllImports(allImports: OptionalKind<ImportDeclarationStructure>[]): void;
    getFileName(): string;
    /**
     * Saves all changes made to source file.
     */
    save(): void;
    getAllText(): string;
    /**
     * For example, we can do getVariablePropertyByName("config", "name")
     * and recieve the string value that the user set as name for their
     * variable named config. This only works for exported variables.
     *
     * @param name of the variable
     * @param property of the variable
     * @returns property of the variable as any
     */
    getVariablePropertyByName(name: string, property: string): any;
    getVariableDeclarationByType(type: string): VariableDeclaration | undefined;
    insertStatement(code: string, index?: number): number;
    removeStatement(startIndex: number, endIndex: number): void;
    getEndPos(): number;
    removeUnusedImports(): void;
}
