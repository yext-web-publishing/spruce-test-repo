/**
 * Event for expanding or collapsing an accordion row. Commonly used for FAQs.
 *
 * @public
 */
export declare interface AccordionToggleEvent {
    /** {@inheritDoc CtaEvent."type"} */
    type: EnumOrString<SearchAnalyticsEventType.RowExpand | SearchAnalyticsEventType.RowCollapse>;
    /** {@inheritDoc CtaEvent.queryId} */
    queryId: string;
    /** {@inheritDoc CtaEvent.verticalKey} */
    verticalKey: string;
    /** {@inheritDoc CtaEvent.entityId} */
    entityId: string;
    /** {@inheritDoc CtaEvent.searcher} */
    searcher?: Searcher;
}

/**
 * The action types accepted by the Analytics Events API.
 *
 * @public
 */
export declare type Action = 'ADD_TO_CART' | 'ALL_TAB_NAVIGATION' | 'APPLY' | 'AUTO_COMPLETE_SELECTION' | 'BACKWARD_PAGINATE' | 'BOOK' | 'BRAND_ICON' | 'CALL_TO_ACTION' | 'CASE_START' | 'CASE_SUBMITTED' | 'CHAT_IMPRESSION' | 'CHAT_LINK_CLICK' | 'CHAT_RESPONSE' | 'COLLAPSE' | 'DIRECTIONS' | 'EVENT' | 'EXPAND' | 'FEATURED_MESSAGE' | 'FILTERING_WITHIN_SECTION' | 'FORWARD_PAGINATE' | 'HEADER_LINKS' | 'ITEM_IN_LIST' | 'MAP_CARD' | 'MAP_PIN' | 'MENU' | 'MESSAGE' | 'ORDER' | 'PAGINATE' | 'PHONE' | 'POST' | 'PRESET_PROMPT' | 'PRODUCT' | 'PROFILE' | 'QUESTION_FOCUS' | 'QUESTION_SUBMIT' | 'REMOVED_FILTER' | 'REVIEW' | 'SCROLL_TO_BOTTOM_OF_PAGE' | 'SEARCH_BAR_IMPRESSION' | 'SEARCH_CLEAR_BUTTON' | 'THUMBS_DOWN' | 'THUMBS_UP' | 'TICKET_URL' | 'TITLE' | 'VERTICAL_TAB_NAVIGATION' | 'VERTICAL_VIEW_ALL' | 'VOICE_START' | 'VOICE_STOP' | 'WEBSITE';

/**
 * Event for navigating to the 'all' tab (a universal page).
 *
 * @public
 */
export declare interface AllTabNavigationEvent {
    /** {@inheritDoc CtaEvent."type"} */
    type: EnumOrString<SearchAnalyticsEventType.AllTabNavigation>;
    /** {@inheritDoc CtaEvent.queryId} */
    queryId?: string;
}

/**
 * The shape of the data which is sent during an analytics request.
 *
 * @public
 */
export declare interface AnalyticsPayload {
    /** Strings mapped to data or objects. */
    [key: string]: string | number | boolean | AnalyticsPayload;
}

/**
 * Event for autocomplete selection.
 *
 * @public
 */
export declare interface AutocompleteEvent {
    /** {@inheritDoc CtaEvent."type"} */
    type: EnumOrString<SearchAnalyticsEventType.AutocompleteSelection>;
    /** Selected search text from an autocomplete suggestion. */
    suggestedSearchText: string;
    /** {@inheritDoc CtaEvent.queryId} */
    queryId?: string;
}

/**
 * Base analytics configuration
 *
 * @public
 */
export declare interface BaseAnalyticsConfig {
    /**
     * Your Yext Account ID
     * Can be easily found from the url of your homepage of your Yext account
     * e.g. https://www.yext.com/s/[businessId]/home
     */
    businessId: number;
    /** {@inheritDoc Visitor} */
    visitor?: Visitor;
    /**
     * Turn on analytics event logging in the console
     */
    debug?: boolean;
}

/**
 * The main configuration options for Chat Analytics.
 *
 * @public
 */
export declare interface ChatAnalyticsConfig {
    /** The API key for accessing the Analytics Events API. */
    apiKey: string;
    /** {@inheritDoc SearchAnalyticsConfig.env} */
    env?: Environment;
    /** {@inheritDoc SearchAnalyticsConfig.region} */
    region?: Region;
    /** Override for the URL which are used when making requests to the Analytics API. */
    endpoint?: string;
    /**
     * Whether to enable session tracking for analytics events.
     * Defaults to true for US region.
     * Defaults to false for EU region.
     *
     * @remarks
     * This generates a ULID to tie together events in a single browsing session.
     */
    sessionTrackingEnabled?: boolean;
}

/**
 * A service for reporting chat analytics events.
 *
 * @public
 */
export declare interface ChatAnalyticsService {
    /**
     * Reports an analytics event.
     * Will perform a promise rejection if the API response contains an error.
     *
     * @param event - The {@link ChatEventPayLoad} to be sent.
     */
    report(event: ChatEventPayLoad): Promise<EventAPIResponse>;
}

/**
 * Analytics event properties specific to Yext Chat.
 *
 * @public
 */
export declare interface ChatDomainProperties {
    /** The ID of the bot that generated the event. */
    botId: string;
    /** The ID of the conversation in which the event occurred. */
    conversationId?: string;
    /** The ID of the individual response in which the event occurred. */
    responseId?: string;
}

/**
 * The payload accepted by the Analytics Events API for Chat related analytics.
 *
 * @public
 */
export declare interface ChatEventPayLoad extends EventPayload {
    /** {@inheritdoc ChatDomainProperties} */
    chat: ChatDomainProperties;
}

/**
 * Shared properties of both ConversionEvent and ListingsClickEvent
 *
 * @public
 */
export declare interface CommonConversionData {
    /**
     * A cookie id from a first party cookie (i.e. from a visit to a domain you control)
     */
    cookieId: string;
    /**
     * Page which sent the user to the current page, comes from typically Document.referrer
     */
    referrer?: string;
    /**
     * The url of the landing page.
     */
    location: string;
}

/**
 * The details of an individual conversion event, without the cookie id.
 *
 * @public
 */
export declare interface ConversionDetails {
    /**
     * The id of the conversion tag, you can find the value from the conversion tracking section in your
     * Yext account. You can find a list of tags under:
     * https://www.yext.com/s/[your business id]/reports/conversiontracking/setup
     */
    cid: string;
    /**
     * Conversion Value	Optional custom value supplied for this conversion
     */
    cv?: string;
}

/**
 * An event representing a Conversion
 *
 * @public
 */
export declare interface ConversionEvent extends CommonConversionData, ConversionDetails {
}

/**
 * A service for tracking conversions
 *
 * @public
 */
export declare interface ConversionTrackingService {
    /**
     * tracks a conversion event
     * @param event - a Conversion event
     */
    trackConversion(event: ConversionEvent): void;
    /**
     * tracks a user's arrival on a landing page from a listings publisher
     * @param event - the event to track
     */
    trackListings(event: ListingsClickEvent): Promise<void>;
    /**
     * Turns on debug logging for event details.  Will log details to the console when report() is called.
     *
     * @param enabled - whether debug logging should be turned on
     */
    setDebugEnabled(enabled: boolean): void;
}

/**
 * URL Parameter & Param name for Yext conversion pixels
 *
 * @public
 */
export declare const COOKIE_PARAM = "_yfpc";

/**
 * CookieManager will manager conversion tracking cookies
 *
 * @public
 */
export declare class CookieManager {
    private _outerWindow;
    private _outerDocument;
    /**
     * Takes the window and document
     * @param _outerWindow - typically the window object or a mock
     * @param _outerDocument - typically teh document object or a mock
     */
    constructor(_outerWindow?: Window, _outerDocument?: Document);
    /**
     * Gets the existing YFPC ID, or sets a new one if it doesn't already exist.
     * You should only call this method if doing so complies with your GDPR/CCPA compliance requirements.
     *
     * @public
     */
    setAndGetYextCookie(): string;
    /**
     */
    private static generateRandomCookie;
    /**
     * Retrieves the identifier stored as a cookie on the user's browser, if present. Otherwise
     * returns empty. This is accomplished by attempting to set a cookie at domains in order of
     * increasing specificity (e.g. ".com", then ".example.com", then ".subdomain.example.com"), and
     * the first one that we can set a cookie in is the root domain. Check if we already have a cookie
     * in the root domain and if not, check if a cookie exists without a domain, for legacy reasons.
     *
     */
    private fetchCookie;
    /**
     * Runs a function on each possible domain in order of increasing specificity (e.g. .com,
     * .example.com, .full.example.com). Note that empty string, indicating unset domain, is iterated
     * through at the end. A truthy return value indicates to break out of the loop.
     *
     * @param func - A function to call on each possible domain
     */
    private forEachDomainIncreasingSpecificity;
    /**
     * Removes a COOKIE_PARAM cookie by domain, then returns its value if successful and empty string
     * otherwise.
     *
     * @param cookieDomain - The domain to remove the cookie from
     */
    private removeCookieByDomain;
    /**
     * Returns the list difference between a superlist and sublist, accounting for number of
     * occurrences.
     *
     * @param superlist - The full array
     * @param sublist - The subarray
     */
    private static listDifference;
    /**
     * Retrieves a list of values of cookies with the name of COOKIE_PARAM that are present and not
     * set to be removed (i.e. having the specific value this script uses to indicate a removed
     * cookie).
     *
     */
    private persistentCookies;
    /**
     * Retrieves a list of values of cookies with the name of COOKIE_PARAM that are present.
     *
     */
    private allCookies;
    /**
     * Runs nameValueFunc on each cookie's key and value (after trimming), only if the key and value
     * are both truthy.
     *
     * @param nameValueFunc - A function to run on each cookie key-value pair
     */
    private forEachCookieNameValue;
    /**
     * Stores a tracking cookie on the user's browser with the given value in the root domain, and
     * removes first party cookies from all other domains (which may be present for legacy reasons).
     *
     * @param cookieValue - The value to set as the first party cookie
     */
    private setCookieAndRemoveOldCookies;
    /**
     * Returns whether we are able to set a cookie (formatted like the actual cookie for tracking)
     * at a specified domain or not. Preserves existing cookies in the same domain (but not their
     * expiration dates).
     *
     * @param domain - The value for the cookie's domain attribute
     */
    private canSetCookieWithDomain;
    /**
     * Stores a cookie on the user's browser with the given value and domain, with name COOKIE_PARAM.
     *
     * @param cookieValue - The value to set as the first party cookie
     * @param cookieDomain - The domain in which to set the cookie
     */
    private setCookie;
    /**
     * Creates a formatted cookie string given a key, value, domain, and, optionally, a path.
     * `Expires` is set to ensure the cookie is persistent, `Samesite=None` so the value can be
     * included in cross-site requests,`Domain` defaults to root domain (if possible) to enable
     * tracking across subdomains, and `Secure` is required when using
     * `Samesite=None`: https://www.chromestatus.com/feature/5633521622188032
     *
     * @param cookieName - The name of the cookie
     * @param cookieValue - The value of the cookie
     * @param domain - The domain to set the cookie for
     * @param path - The path to set the cookie for
     */
    private formatCookie;
    /**
     * Sets a cookie with name COOKIE_PARAM to make it expire immediately.
     *
     * @param cookieDomain - The domain of the cookie to clear
     * @param cookiePath - The path of the cookie to be deleted (defaults to '/')
     */
    private clearCookie;
}

/**
 * A Pages CTA Event
 *
 * @public
 */
export declare const CtaClick: PagesAnalyticsEvent;

/**
 * A call to action analytics event.
 *
 * @public
 */
export declare interface CtaEvent {
    /** An enum member or its string value which denotes the event type. */
    type: EnumOrString<SearchAnalyticsEventType.CtaClick | SearchAnalyticsEventType.TitleClick | SearchAnalyticsEventType.TapToCall | SearchAnalyticsEventType.OrderNow | SearchAnalyticsEventType.AddToCart | SearchAnalyticsEventType.ApplyNow | SearchAnalyticsEventType.DrivingDirections | SearchAnalyticsEventType.ViewWebsite | SearchAnalyticsEventType.Email | SearchAnalyticsEventType.BookAppointment | SearchAnalyticsEventType.Rsvp>;
    /**
     * The vertical key for the vertical on which the event was fired. Or, if
     * it is a universal search, the vertical key for the section in the universal
     * results.
     */
    verticalKey: string;
    /** The entity ID for the entity. */
    entityId: string;
    /** Whether it was on universal or vertical search. */
    searcher: Searcher;
    /** The ID of the most recent query. */
    queryId: string;
    /** Whether or not the event was fired on a direct answer card. */
    directAnswer?: boolean;
    /** The url of the event target. */
    url?: string;
    /** The name of the Rich Text field used. */
    fieldName?: string;
    /** The label for this CTA event. */
    ctaLabel?: 'video_played' | string;
}

/**
 * Default pages analytics event types.
 *
 * @public
 */
export declare enum DefaultPagesEventNames {
    PageView = "PAGE_VIEW",
    CTA = "CTA_CLICK",
    Website = "WEBSITE",
    DrivingDirection = "DRIVING_DIRECTIONS",
    PhoneCall = "CALL"
}

/**
 * Represents the analytics parameters required to track events on a directory page
 *
 * @public
 */
export declare interface DirectoryPage extends PageType {
    /** {@inheritDoc PageType.name} */
    readonly name: 'directory';
    /**
     * The name of the directory page feature, may be from the 'name' property of your feature in features.json
     * or the name of your page template file if you are using yext/pages to implement your page.
     */
    directoryId: string;
    /**
     * Yext Internal ID of Entities to Track. May come from meta.id or the uid parameter of a stream document
     */
    id: number;
}

/**
 * A Pages DrivingDirection Event
 *
 * @public
 */
export declare const DrivingDirectionEvent: PagesAnalyticsEvent;

/**
 * Represents the analytics parameters required to track events on an Entity Page
 *
 * @public
 */
export declare interface EntityPage extends PageType {
    /** {@inheritDoc PageType.name} */
    readonly name: 'entity';
    /**
     * The name of the entity page feature, may be from the 'name' property of your feature in features.json
     * or the name of your page template file if you are using yext/pages to implement your page.
     */
    pageSetId: string;
    /**
     * Yext Internal ID of Entities to Track. May come from meta.id or the uid parameter of a stream document
     */
    id: number;
}

/**
 * A TypeScript utility type which creates a union of an enum member and its string representation.
 *
 * @remarks
 * Allows interfaces to support both enums and strings.
 *
 * @public
 */
export declare type EnumOrString<T extends string> = T | `${T}`;

/**
 * The Yext Environments
 *
 * @remarks
 * Affects the domain the requests are sent to.
 *
 * @public
 */
export declare type Environment = EnumOrString<EnvironmentEnum>;

/**
 * An enum for the Yext Environments
 *
 * @remarks
 * Affects the domain the requests are sent to.
 *
 * @public
 */
export declare enum EnvironmentEnum {
    Production = "PRODUCTION",
    Sandbox = "SANDBOX"
}

/**
 * Response from an analytic request.
 *
 * @public
 */
export declare interface EventAPIResponse {
    /**
     * Generated ID for the event.
     */
    id: string;
    /**
     * Errors returned for non-successful requests.
     */
    errors?: string[];
}

/**
 * The payload accepted by the Analytics Events API.
 *
 * @public
 */
export declare interface EventPayload {
    /** The user action which caused the event, e.g. ADD_TO_CART or THUMBS_UP  */
    action: Action;
    /** Unique identifier to tie together events in a single browsing session */
    sessionId?: string;
    /** The URL of the page where the event occurred */
    pageUrl?: string;
    /** The URL of the page the event is directing the visitor to. */
    destinationUrl?: string;
    /** The URL of the page which the visitor came from prior to the event. */
    referrerUrl?: string;
    /** A label assigned to the event, e.g. a CTA label. */
    label?: string;
    /** The locale of the user who generated the event. */
    locale?: string;
    /** The timestamp at which the event occurred, in ISO format. */
    timestamp?: Date | string;
    /** Whether the event is the result of bot activity. */
    bot?: string;
    /** Information about the visitors device and browser. */
    browserAgent?: {
        /** The browser associated with the event. */
        browser?: string;
        /** The browser version associated with the event. */
        browserVersion?: string;
        /** The operating system associated with the event. */
        os?: string;
        /** The operating system version associated with the event. */
        osVersion?: string;
        /** The device associated with the event. */
        device?: string;
        /** The device class associated with the event. */
        deviceClass?: string;
        /** The user agent associated with the event. */
        userAgent?: string;
    };
    /**
     * For the Yext client SDKs involved in the event, this is an object mapping
     * the names of those SDKs to the version labels of those SDKs.
     */
    clientSdk?: Record<string, string>;
    /** Indicates whether the event is the result of internal activity. */
    internalUser?: boolean;
    /**
     * When the record summarizes multiple events, the number of events the record represents.
     * The event is treated as if it is duplicated this many times.
     */
    count?: number;
    /**
     * Up to 10 pairs matching custom string keys to string values to associate with the event.
     * Keys are case-insensitive; values are case-sensitive.
     */
    customTags?: Record<string, string>;
    /**
     * Up to 10 pairs matching custom string keys to number values to associate with the event.
     * Keys are case-insensitive.
     */
    customValues?: Record<string, number>;
    /** The Yext entity to which the event corresponds.  */
    entity?: {
        /** The mutable, customer-settable entity ID for the entity associated with the event. */
        entityId: string;
    } | {
        /** The immutable entity ID set by the system. This is an internal ID. */
        entityUid: number;
    };
    /** The IP address for the event.*/
    ip?: {
        /** The IPv4 address associated with the event. */
        address: string;
        /** The algorithm to use to anonymize the IP address after collection. */
        algorithm?: string;
    };
    /**
     * Information used to associate analytics with a particular user.
     *
     * @remarks
     * Keys are visitor methods and values are visitor IDs.
     * Key pattern: `^[a-zA-Z0-9_-]{1,16}$`.
     * Value pattern: `^[\x20-\x7E]{1,64}$`
     *
     * @public
     */
    visitor?: Record<string, string>;
}

/**
 * An event representing a user arriving at a landing page from a publisher site.
 *
 * @public
 */
export declare interface ListingsClickEvent extends CommonConversionData {
    /**
     * The source parameter signifying which listings publisher should get credit
     * Comes from the y_source URL Parameter.
     */
    source: string;
}

/**
 * Represents the analytics parameters required to track events on a Locator Page
 *
 * @public
 */
export declare interface LocatorPage extends PageType {
    /** {@inheritDoc PageType.name} */
    readonly name: 'locator';
    /**
     * The name of the locator page feature, may be from the 'name' property of your feature in features.json
     * or the name of your page template file if you are using yext/pages to implement your page.
     */
    searchId: string;
}

/**
 * The main configuration options for Pages Analytics.  Contains all page or session level information.
 *
 * @public
 */
export declare interface PagesAnalyticsConfig extends BaseAnalyticsConfig {
    /**
     * The ID of the Pages Site
     * Can be easily found from the url of the Deploy Page in your Yext Account
     * e.g. https://www.yext.com/s/[businessId]/yextsites/[siteid]/branch/[branchId]/deploys/recent
     */
    siteId: number;
    /**
     * Set to true if the environment is production
     * If set to true events will appear in Analytics Reports in your Yext Account
     */
    production: boolean;
    /**
     * The full url of the page we are on, typically window.location.href
     */
    pageUrl: string;
    /**
     * Page which sent the user to the current page, comes from typically Document.referrer
     */
    referrer: string;
    /**
     * The details of the page type
     */
    pageType: DirectoryPage | EntityPage | LocatorPage | StaticPage;
    /**
     * The domain of the page. If none is specified, the hostname for the site ID is used.
     *
     * @remarks
     * The domain string must include the scheme (e.g. https://foo.com).
     */
    pageDomain?: string;
    /** {@inheritDoc SearchAnalyticsConfig.region} */
    region?: Region;
}

/**
 * An event from the Pages system
 *
 * @public
 */
export declare interface PagesAnalyticsEvent {
    /**
     * The event ID, will be displayed in Analytics reporting in your Yext Account.
     * Can be one of the built in types or a custom one.  Custom ones should start with `C_`.
     */
    eventType: DefaultPagesEventNames.PageView | DefaultPagesEventNames.CTA | DefaultPagesEventNames.PhoneCall | DefaultPagesEventNames.DrivingDirection | DefaultPagesEventNames.Website | string;
}

/**
 * A service for reporting pages analytics events.
 *
 * @public
 */
export declare interface PagesAnalyticsService {
    /**
     * Reports a page view event.
     * Will preform a promise rejection if the API contains an error or if
     * the parameters are misconfigured.
     */
    pageView(): Promise<void>;
    /**
     * Reports a user interaction event.
     * Will perform a promis rejection if the API contains an error or if
     * the parameters are misconfigured.
     * @param event - the pages event to track
     * @param conversionInfo - Optional parameter to pass with the CID from the conversion tag if this event
     * should represent a conversion and conversion tracking is enabled.
     */
    track(event: PagesAnalyticsEvent, conversionInfo?: ConversionDetails): Promise<void>;
    /**
     * Sets the {@link Visitor} object which is included with each subsequent request.
     *
     * @param visitor - The visitor to be set, or undefined.
     */
    setVisitor(visitor: Visitor | undefined): void;
    /**
     * Turns on debug logging for event details.  Will log details to the console when report() is called.
     *
     * @param enabled - whether debug logging should be turned on
     */
    setDebugEnabled(enabled: boolean): void;
    /**
     * Turns on conversion tracking. Will allow page views and other events to receive credit for
     * conversion events.
     */
    setConversionTrackingEnabled(enabled: boolean, cookieId: string): void;
}

/**
 * represents a page type
 *
 * @public
 */
export declare interface PageType {
    /**
     * The string name of the page type
     */
    name: string;
}

/**
 * A Pages PageView Event
 *
 * @public
 */
export declare const PageViewEvent: PagesAnalyticsEvent;

/**
 * Event for pagination interaction.
 *
 * @public
 */
export declare interface PaginationEvent {
    /** {@inheritDoc CtaEvent."type"} */
    type: EnumOrString<SearchAnalyticsEventType.Paginate>;
    /** {@inheritDoc CtaEvent.verticalKey} */
    verticalKey: string;
    /** The ID of the query correspond to this pagination sequence. */
    queryId: string;
    /** Current page number. */
    currentPage: number;
    /** Next page number to navigate to. */
    newPage: number;
    /** Total page count from pagination. */
    totalPageCount: number;
}

/**
 * A Pages Phone Call Event
 *
 * @public
 */
export declare const PhoneCallEvent: PagesAnalyticsEvent;

/**
 * Maintained for backwards compatibility with older versions of the library
 * provideAnalytics uses the AnalyticsConfig, AnalyticsService, and AnalyticsReporter aliases
 * for SearchAnalyticsConfig, SearchAnalyticsService, and SearchAnalyticsReporter
 *
 * @remarks
 * Returns an analytics service instance.
 *
 * @param config - The analytics config
 *
 * @public
 */
export declare function provideAnalytics(config: SearchAnalyticsConfig): SearchAnalyticsService;

/**
 * Provides a Chat Analytics service
 *
 * @remarks
 * Returns a conversion tracking service instance
 *
 * @public
 */
export declare function provideChatAnalytics(config: ChatAnalyticsConfig): ChatAnalyticsService;

/**
 * Provides a Conversion Tracking service given an optional debugging parameter
 *
 * @remarks
 * Returns a conversion tracking service instance
 *
 * @param debug - turn on console log debugging for tracked events
 *
 * @public
 */
export declare function provideConversionTrackingAnalytics(debug?: boolean): ConversionTrackingService;

/**
 * Provides a Pages Analytics service given a Pages specific config
 *
 * @remarks
 * Returns an analytics service instance.
 *
 * @param config - The Pages analytics config
 *
 * @public
 */
export declare function providePagesAnalytics(config: PagesAnalyticsConfig): PagesAnalyticsService;

/**
 * Provides a Search Analytics service given a Search specific config
 *
 * @remarks
 * Returns an analytics service instance.
 *
 * @param config - The Search analytics config
 *
 * @public
 */
export declare function provideSearchAnalytics(config: SearchAnalyticsConfig): SearchAnalyticsService;

/**
 * Event for submitting a question.
 *
 * @public
 */
export declare interface QuestionSubmissionEvent {
    /** {@inheritDoc CtaEvent."type"} */
    type: EnumOrString<SearchAnalyticsEventType.QuestionFocus | SearchAnalyticsEventType.QuestionSubmit>;
    /** {@inheritDoc CtaEvent.queryId} */
    queryId: string;
    /** {@inheritDoc CtaEvent.verticalKey} */
    verticalKey: string;
    /** {@inheritDoc CtaEvent.searcher} */
    searcher: Searcher;
}

/**
 * The physical region of the Yext account
 *
 * @remarks
 * Affects the domain the requests are sent to.
 *
 * @public
 */
export declare type Region = EnumOrString<RegionEnum>;

/**
 * An enum of the physical region the Yext account
 *
 * @remarks
 * Affects the domain the requests are sent to.
 *
 * @public
 */
export declare enum RegionEnum {
    US = "US",
    EU = "EU"
}

/**
 * Event for scrolling to the bottom of the page.
 *
 * @public
 */
export declare interface ScrollEvent {
    /** {@inheritDoc CtaEvent."type"} */
    type: EnumOrString<SearchAnalyticsEventType.ScrollToBottomOfPage>;
    /** {@inheritDoc CtaEvent.queryId} */
    queryId: string;
}

/**
 * The main configuration options for Search Analytics.
 *
 * @public
 */
declare interface SearchAnalyticsConfig extends BaseAnalyticsConfig {
    /** The experience key of the answers experience. */
    experienceKey: string;
    /** The experience version of the answers experience. */
    experienceVersion: 'PRODUCTION' | 'STAGING' | string;
    /** The region to send the requests to. Defaults to 'US'. */
    region?: Region;
    /** The Yext environment to send the requests to. Defaults to 'PRODUCTION'. */
    env?: Environment;
    /**
     * The domain to send the requests to. Overrides the 'region' and 'env' config options.
     *
     * @deprecated
     * Use a combination of {@link SearchAnalyticsConfig.region} and {@link SearchAnalyticsConfig.env} instead.
     */
    domain?: string;
}
export { SearchAnalyticsConfig as AnalyticsConfig }
export { SearchAnalyticsConfig }

/**
 * An analytics event.
 *
 * @public
 */
export declare type SearchAnalyticsEvent = AccordionToggleEvent | CtaEvent | QuestionSubmissionEvent | ScrollEvent | SearchBarImpressionEvent | SearchClearEvent | SearchDurationEvent | ThumbsFeedbackEvent | VerticalViewAllEvent | VoiceSearchEvent | PaginationEvent | AutocompleteEvent | AllTabNavigationEvent | VerticalTabNavigationEvent;

/**
 * Represents the possible analytics event types.
 *
 * @public
 */
declare enum SearchAnalyticsEventType {
    /** {@link AllTabNavigationEvent} */
    AllTabNavigation = "ALL_TAB_NAVIGATION",
    /** {@link AllTabNavigationEvent} */
    VerticalTabNavigation = "VERTICAL_TAB_NAVIGATION",
    /** {@link ScrollEvent} */
    ScrollToBottomOfPage = "SCROLL_TO_BOTTOM_OF_PAGE",
    /** {@link QuestionSubmissionEvent} */
    QuestionFocus = "QUESTION_FOCUS",
    /** {@link QuestionSubmissionEvent} */
    QuestionSubmit = "QUESTION_SUBMIT",
    /** {@link AccordionToggleEvent} */
    RowExpand = "ROW_EXPAND",
    /** {@link AccordionToggleEvent} */
    RowCollapse = "ROW_COLLAPSE",
    /** {@link ThumbsFeedbackEvent} */
    ThumbsUp = "THUMBS_UP",
    /** {@link ThumbsFeedbackEvent} */
    ThumbsDown = "THUMBS_DOWN",
    /** {@link VoiceSearchEvent} */
    VoiceStart = "VOICE_START",
    /** {@link VoiceSearchEvent} */
    VoiceStop = "VOICE_STOP",
    /** {@link SearchBarImpressionEvent} */
    SearchBarImpression = "SEARCH_BAR_IMPRESSION",
    /** {@link SearchClearEvent} */
    SearchClearButton = "SEARCH_CLEAR_BUTTON",
    /** {@link PaginationEvent} */
    Paginate = "PAGINATE",
    /** {@link AutocompleteEvent} */
    AutocompleteSelection = "AUTO_COMPLETE_SELECTION",
    /** {@link VerticalViewAllEvent} */
    VerticalViewAll = "VERTICAL_VIEW_ALL",
    /** {@link CtaEvent} */
    CtaClick = "CTA_CLICK",
    /** {@link CtaEvent} */
    TitleClick = "TITLE_CLICK",
    /** {@link CtaEvent} */
    TapToCall = "TAP_TO_CALL",
    /** {@link CtaEvent} */
    OrderNow = "ORDER_NOW",
    /** {@link CtaEvent} */
    AddToCart = "ADD_TO_CART",
    /** {@link CtaEvent} */
    ApplyNow = "APPLY_NOW",
    /** {@link CtaEvent} */
    DrivingDirections = "DRIVING_DIRECTIONS",
    /** {@link CtaEvent} */
    ViewWebsite = "VIEW_WEBSITE",
    /** {@link CtaEvent} */
    Email = "EMAIL",
    /** {@link CtaEvent} */
    BookAppointment = "BOOK_APPOINTMENT",
    /** {@link CtaEvent} */
    Rsvp = "RSVP",
    /** {@link SearchDurationEvent} */
    ResultsHidden = "RESULTS_HIDDEN",
    /** {@link SearchDurationEvent} */
    ResultsUnhidden = "RESULTS_UNHIDDEN",
    /** {@link SearchDurationEvent} */
    FollowUpQuery = "FOLLOW_UP_QUERY"
}
export { SearchAnalyticsEventType as AnalyticsEventType }
export { SearchAnalyticsEventType }

/**
 * A service for reporting search analytics events.
 *
 * @public
 */
declare interface SearchAnalyticsService {
    /**
     * Reports an analytics event.
     * Will perform a promise rejection if the API response contains an error.
     *
     * @param event - The {@link SearchAnalyticsEvent} to be sent.
     * @param additionalRequestAttributes - Additional data included in the network request.
     */
    report(event: SearchAnalyticsEvent, additionalRequestAttributes?: AnalyticsPayload): Promise<void>;
    /**
     * Sets the {@link Visitor} object which is included with each subsequent request.
     *
     * @param visitor - The visitor to be set, or undefined.
     */
    setVisitor(visitor: Visitor | undefined): void;
    /**
     * Turns on debug logging for event details.  Will log details to the console when report() is called.
     *
     * @param enabled - whether debug logging should be turned on
     */
    setDebugEnabled(enabled: boolean): void;
}
export { SearchAnalyticsService as AnalyticsService }
export { SearchAnalyticsService }

/**
 * Event for expanding or collapsing an accordion row.
 *
 * @public
 */
export declare interface SearchBarImpressionEvent {
    /** {@inheritDoc CtaEvent."type"} */
    type: EnumOrString<SearchAnalyticsEventType.SearchBarImpression>;
    /** Whether or not the impression came from a standalone search bar. */
    standAlone: boolean;
    /** {@inheritDoc CtaEvent.verticalKey} */
    verticalKey?: string;
    /** {@inheritDoc CtaEvent.searcher} */
    searcher?: Searcher;
}

/**
 * Event for clicking on the button to clear the search input.
 *
 * @public
 */
export declare interface SearchClearEvent {
    /** {@inheritDoc CtaEvent."type"} */
    type: EnumOrString<SearchAnalyticsEventType.SearchClearButton>;
    /** {@inheritDoc CtaEvent.queryId} */
    queryId: string;
    /** The vertical key of the vertical if the event was not fired on a universal page. */
    verticalKey?: string;
}

/**
 * Event used to calculate the duration of a search.
 *
 * @public
 */
export declare interface SearchDurationEvent {
    /** {@inheritDoc CtaEvent."type"} */
    type: EnumOrString<SearchAnalyticsEventType.ResultsHidden | SearchAnalyticsEventType.ResultsUnhidden | SearchAnalyticsEventType.FollowUpQuery>;
    /** {@inheritDoc CtaEvent.queryId} */
    queryId: string;
    /** {@inheritDoc CtaEvent.searcher} */
    searcher: Searcher;
}

/**
 * Whether the search occurred on universal or vertical search.
 *
 * @public
 */
export declare type Searcher = 'UNIVERSAL' | 'VERTICAL';

/**
 * Represents the analytics parameters required to track events on a static page
 *
 * @public
 */
export declare interface StaticPage extends PageType {
    /** {@inheritDoc PageType.name} */
    readonly name: 'static';
    /**
     * The name of the static page feature, may be from the 'name' property of your feature in features.json
     * or the name of your page template file if you are using yext/pages to implement your page.
     */
    staticPageId: string;
}

/**
 * Event for submitting thumbs up/down feedback (ThumbsUp and ThumbsDown).
 *
 * @public
 */
export declare interface ThumbsFeedbackEvent {
    /** {@inheritDoc CtaEvent."type"} */
    type: EnumOrString<SearchAnalyticsEventType.ThumbsUp | SearchAnalyticsEventType.ThumbsDown>;
    /** {@inheritDoc CtaEvent.queryId} */
    queryId: string;
    /** {@inheritDoc CtaEvent.directAnswer} */
    directAnswer?: boolean;
    /** {@inheritDoc CtaEvent.verticalKey} */
    verticalKey?: string;
    /** {@inheritDoc CtaEvent.entityId} */
    entityId?: string;
    /** {@inheritDoc CtaEvent.searcher} */
    searcher?: Searcher;
}

/**
 * Event for navigating to a vertical tab or page.
 *
 * @public
 */
export declare interface VerticalTabNavigationEvent {
    /** {@inheritDoc CtaEvent."type"} */
    type: EnumOrString<SearchAnalyticsEventType.VerticalTabNavigation>;
    /** {@inheritDoc CtaEvent.verticalKey} */
    verticalKey: string;
    /** {@inheritDoc CtaEvent.queryId} */
    queryId?: string;
}

/**
 * Event for clicking on a vertical's View All button on a universal page.
 *
 * @public
 */
export declare interface VerticalViewAllEvent {
    /** {@inheritDoc CtaEvent."type"} */
    type: EnumOrString<SearchAnalyticsEventType.VerticalViewAll>;
    /** {@inheritDoc CtaEvent.queryId} */
    queryId: string;
    /** The vertical key of the vertical for which the event was fired. */
    verticalKey: string;
}

/**
 * Information used to associate analytics with a particular user.
 *
 * @public
 */
export declare interface Visitor {
    /** The ID associated with the user. */
    id: string;
    /**
     * The type of visitor.
     *
     * @example 'YEXT_USER' for Yext Auth
     */
    idMethod?: string;
}

/**
 * Event for starting or stopping voice search.
 *
 * @public
 */
export declare interface VoiceSearchEvent {
    /** {@inheritDoc CtaEvent."type"} */
    type: EnumOrString<SearchAnalyticsEventType.VoiceStart | SearchAnalyticsEventType.VoiceStop>;
    /**
     * The timestamp (number of milliseconds since the Unix epoch) for firing
     * the event.
     */
    timestamp: number;
    /**
     * The UUID for the voice session. Each 'VOICE_STOP' event should
     * correspond to a 'VOICE_START' event with the same ID.
     */
    voiceSessionId: string;
}

/**
 * A Pages Website Click Event
 *
 * @public
 */
export declare const WebsiteEvent: PagesAnalyticsEvent;

export { }
