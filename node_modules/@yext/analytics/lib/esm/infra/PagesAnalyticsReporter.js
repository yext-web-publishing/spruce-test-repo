var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { COOKIE_PARAM, LISTINGS_SOURCE_PARAM } from '../models/constants';
import { DefaultPagesEventNames } from '../models';
import { PageViewEvent } from '../models';
import { calculateSeed } from './CalculateSeed';
import { ConversionTrackingReporter } from './ConversionTrackingReporter';
import { getPagesEndpoint } from '../utils/endpointProviders';
var PRODUCT_NAME = 'sites';
var urlParamNames;
(function (urlParamNames) {
    urlParamNames["BusinessId"] = "businessids";
    urlParamNames["Product"] = "product";
    urlParamNames["SiteId"] = "siteId";
    urlParamNames["IsStaging"] = "isStaging";
    urlParamNames["CacheBuster"] = "v";
    urlParamNames["UrlPath"] = "pageurl";
    urlParamNames["Referrer"] = "pagesReferrer";
    urlParamNames["EventType"] = "eventType";
    urlParamNames["PageSetId"] = "pageSetId";
    urlParamNames["EntityInternalId"] = "ids";
    urlParamNames["DirectoryId"] = "directoryId";
    urlParamNames["SearchId"] = "searchId";
    urlParamNames["StaticPageId"] = "staticPageId";
    urlParamNames["PageType"] = "pageType";
    urlParamNames["VisitorId"] = "visitorId";
    urlParamNames["VisitorMethod"] = "visitorIdMethod";
    urlParamNames["PageDomain"] = "pageDomain";
})(urlParamNames || (urlParamNames = {}));
var eventTypeNameMapping = new Map();
eventTypeNameMapping.set(DefaultPagesEventNames.PageView, 'pageview');
eventTypeNameMapping.set(DefaultPagesEventNames.CTA, 'calltoactionclick');
eventTypeNameMapping.set(DefaultPagesEventNames.PhoneCall, 'phonecall');
eventTypeNameMapping.set(DefaultPagesEventNames.DrivingDirection, 'drivingdirection');
eventTypeNameMapping.set(DefaultPagesEventNames.Website, 'clicktowebsite');
function getEventName(name) {
    var mappedName = eventTypeNameMapping.get(name);
    if (typeof mappedName === 'string') {
        return mappedName;
    }
    return name;
}
/**
 * Responsible for reporting Pages Analytics Events
 *
 * @public
 */
var PagesAnalyticsReporter = /** @class */ (function () {
    function PagesAnalyticsReporter(config, httpRequesterService) {
        this.config = config;
        this.httpRequesterService = httpRequesterService;
        this.setVisitor(config.visitor);
        this._debug = config.debug;
        this._conversionTracker = new ConversionTrackingReporter(this.httpRequesterService, this._debug);
        this._hasTrackedListings = false;
        this._region = config.region;
        try {
            this._pageUrl = new URL(config.pageUrl);
        }
        catch (_a) {
            throw new Error("pageUrl property must be a valid URL, was: '".concat(config.pageUrl, "'"));
        }
        if (config.pageDomain) {
            try {
                this._pageDomain = new URL(config.pageDomain);
            }
            catch (_b) {
                console.warn("pageDomain '".concat(config.pageDomain, "' is not a valid URL."), 'It will not be included as a query param sent to the API.');
            }
        }
    }
    /**
     * Prints event details to the console for debugging of analytics events as they fire.
     * @param event - the PagesAnalyticsEvent that will be printed
     */
    PagesAnalyticsReporter.prototype.printEvent = function (event) {
        if (!this._debug)
            return;
        console.log("%c[YextAnalytics]%c- Tracked Pages event: ".concat(event.eventType), 'background: white; color: blue;', '');
    };
    /**
     * Converts config and PagesAnalyticsEvent into url parameters for sending to API
     * @param event - PagesAnalyticsEvent to transform into URLSearchParams
     */
    PagesAnalyticsReporter.prototype.urlParameters = function (event) {
        var params = new URLSearchParams();
        params.set(urlParamNames.BusinessId, this.config.businessId.toString());
        params.set(urlParamNames.Product, PRODUCT_NAME);
        params.set(urlParamNames.SiteId, this.config.siteId.toString());
        params.set(urlParamNames.IsStaging, (!this.config.production).toString());
        params.set(urlParamNames.EventType, getEventName(event.eventType));
        params.set(urlParamNames.PageType, this.config.pageType.name);
        if (this.config.pageType.name === 'entity') {
            params.set(urlParamNames.PageSetId, this.config.pageType.pageSetId);
            params.set(urlParamNames.EntityInternalId, this.config.pageType.id.toString());
        }
        else if (this.config.pageType.name === 'directory') {
            params.set(urlParamNames.DirectoryId, this.config.pageType.directoryId);
            params.set(urlParamNames.EntityInternalId, this.config.pageType.id.toString());
        }
        else if (this.config.pageType.name === 'locator') {
            params.set(urlParamNames.SearchId, this.config.pageType.searchId);
        }
        else if (urlParamNames.StaticPageId in this.config.pageType) {
            params.set(urlParamNames.StaticPageId, this.config.pageType.staticPageId);
        }
        params.set(urlParamNames.CacheBuster, calculateSeed().toString());
        params.set(urlParamNames.UrlPath, this._pageUrl.pathname);
        params.set(urlParamNames.Referrer, this.config.referrer);
        this._pageDomain && params.set(urlParamNames.PageDomain, this._pageDomain.toString());
        if (this._conversionTrackingEnabled && this._cookieID) {
            params.set(COOKIE_PARAM, this._cookieID);
        }
        if (this._visitor) {
            params.set(urlParamNames.VisitorId, this._visitor.id);
            if (this._visitor.idMethod)
                params.set(urlParamNames.VisitorMethod, this._visitor.idMethod);
        }
        return params;
    };
    /** {@inheritDoc PagesAnalyticsService.pageView} */
    PagesAnalyticsReporter.prototype.pageView = function () {
        return __awaiter(this, void 0, void 0, function () {
            var sourceValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sourceValue = this._pageUrl.searchParams.get(LISTINGS_SOURCE_PARAM);
                        if (!(this._conversionTrackingEnabled
                            && this._cookieID
                            && !this._hasTrackedListings
                            && sourceValue)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._conversionTracker.trackListings({
                                cookieId: this._cookieID,
                                location: this._pageUrl.toString(),
                                source: sourceValue,
                            })];
                    case 1:
                        _a.sent();
                        this._hasTrackedListings = true;
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.track(PageViewEvent)];
                }
            });
        });
    };
    /** {@inheritDoc PagesAnalyticsService.setDebugEnabled} */
    PagesAnalyticsReporter.prototype.track = function (event, conversionInfo) {
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, url, res, errorMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = getPagesEndpoint(this._region, this._conversionTrackingEnabled);
                        url = new URL(endpoint);
                        url.search = this.urlParameters(event).toString();
                        return [4 /*yield*/, this.httpRequesterService.get(url.toString())];
                    case 1:
                        res = _a.sent();
                        if (!(res.status !== 200 && !(res.type == 'opaque' || res.type == 'opaqueredirect'))) return [3 /*break*/, 3];
                        return [4 /*yield*/, res.text()];
                    case 2:
                        errorMessage = _a.sent();
                        throw new Error(errorMessage);
                    case 3:
                        this.printEvent(event);
                        if (!(this._conversionTrackingEnabled && this._cookieID && conversionInfo)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this._conversionTracker.trackConversion({
                                cid: conversionInfo.cid,
                                cv: conversionInfo.cv,
                                cookieId: this._cookieID,
                                location: this._pageUrl.toString(),
                            })];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /** {@inheritDoc PagesAnalyticsService.setDebugEnabled} */
    PagesAnalyticsReporter.prototype.setDebugEnabled = function (enabled) {
        this._debug = enabled;
        if (this._conversionTracker) {
            this._conversionTracker.setDebugEnabled(enabled);
        }
    };
    /** {@inheritDoc PagesAnalyticsService.setVisitor} */
    PagesAnalyticsReporter.prototype.setVisitor = function (visitor) {
        this._visitor = visitor;
    };
    /** {@inheritDoc PagesAnalyticsService.setConversionTrackingEnabled} */
    PagesAnalyticsReporter.prototype.setConversionTrackingEnabled = function (enabled, cookieId) {
        this._conversionTrackingEnabled = enabled;
        this._cookieID = cookieId;
    };
    return PagesAnalyticsReporter;
}());
export { PagesAnalyticsReporter };
//# sourceMappingURL=PagesAnalyticsReporter.js.map