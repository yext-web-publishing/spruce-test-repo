var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { getOrSetupSessionId } from '../utils/getOrSetupSessionId';
import { getChatEndpoint } from '../utils/endpointProviders';
/**
 * A class to report chat analytics data. Uses the provided API key, environment,
 * and partition to determine the endpoint for reporting events.
 *
 * @public
 */
var ChatAnalyticsReporter = /** @class */ (function () {
    function ChatAnalyticsReporter(_a, httpRequesterService) {
        var apiKey = _a.apiKey, env = _a.env, _b = _a.region, region = _b === void 0 ? 'US' : _b, endpoint = _a.endpoint, _c = _a.sessionTrackingEnabled, sessionTrackingEnabled = _c === void 0 ? region === 'US' : _c;
        this.httpRequesterService = httpRequesterService;
        this.apiKey = apiKey;
        this.sessionTrackingEnabled = sessionTrackingEnabled;
        this.endpoint = endpoint !== null && endpoint !== void 0 ? endpoint : getChatEndpoint(region, env);
    }
    /**
     * Report an event to the chat analytics API.
     * @param event - The event to report.
     * @returns A promise that resolves to the response from the API.
     * @example
     *
     * ```ts
     * reporter.report({
     *   action: 'DIRECTIONS',
     *   chat: {
     *     botId: 'davish-playground',
     *   },
     * });
     * // Response
     * {
     *   id: '12345',
     * }
     * ```
     */
    ChatAnalyticsReporter.prototype.report = function (event) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var headers, sessionId, res, body, errorMessage_1, resJson;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        headers = {
                            Authorization: "KEY ".concat(this.apiKey),
                            'Content-Type': 'application/json',
                        };
                        sessionId = this.sessionTrackingEnabled
                            ? ((_b = (_a = event.sessionId) !== null && _a !== void 0 ? _a : getOrSetupSessionId()) !== null && _b !== void 0 ? _b : undefined)
                            : undefined;
                        return [4 /*yield*/, this.httpRequesterService.post(this.endpoint, __assign(__assign({}, event), { sessionId: sessionId }), headers)];
                    case 1:
                        res = _d.sent();
                        if (!!res.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, res.json()];
                    case 2:
                        body = _d.sent();
                        errorMessage_1 = "Events API responded with ".concat(res.status, ": ").concat(res.statusText);
                        (_c = body.errors) === null || _c === void 0 ? void 0 : _c.forEach(function (e) { return errorMessage_1 += "\nError: ".concat(e, "."); });
                        throw new Error(errorMessage_1);
                    case 3: return [4 /*yield*/, res.json()];
                    case 4:
                        resJson = _d.sent();
                        return [2 /*return*/, resJson];
                }
            });
        });
    };
    return ChatAnalyticsReporter;
}());
export { ChatAnalyticsReporter };
//# sourceMappingURL=ChatAnalyticsReporter.js.map