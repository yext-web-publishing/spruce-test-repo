import { HttpRequesterService, SearchAnalyticsService } from '../services';
import { AnalyticsPayload, SearchAnalyticsConfig, SearchAnalyticsEvent, Visitor } from '../models';
/**
 * Responsible for reporting Analytics events.
 *
 * @public
 */
export declare class SearchAnalyticsReporter implements SearchAnalyticsService {
    private config;
    private httpRequesterService;
    private _visitor;
    private _debug;
    private readonly _endpoint;
    constructor(config: SearchAnalyticsConfig, httpRequesterService: HttpRequesterService);
    /**
     * Prints event details to the console for debugging of analytics events as they fire.
     * @param event - the SearchAnalyticsEvent that will be printed
     */
    private printEvent;
    /** {@inheritDoc AnalyticsService.report} */
    report(event: SearchAnalyticsEvent, additionalRequestAttributes?: AnalyticsPayload): Promise<void>;
    /** {@inheritDoc AnalyticsService.setVisitor} */
    setVisitor(visitor: Visitor | undefined): void;
    /**
     * Formats the event data for the api which includes adapting verticalKey to verticalConfigId.
     *
     * @param event - The data to format.
     * @returns The formatted data.
     */
    private static _formatForApi;
    /** {@inheritDoc SearchAnalyticsService.setDebugEnabled} */
    setDebugEnabled(enabled: boolean): void;
}
//# sourceMappingURL=SearchAnalyticsReporter.d.ts.map