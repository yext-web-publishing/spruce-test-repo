"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.provideChatAnalytics = exports.provideConversionTrackingAnalytics = exports.providePagesAnalytics = exports.provideSearchAnalytics = exports.provideAnalytics = void 0;
const HttpRequester_1 = require("./infra/HttpRequester");
const AnalyticsReporter_1 = require("./infra/AnalyticsReporter");
const ConversionTrackingReporter_1 = require("./infra/ConversionTrackingReporter");
const SearchAnalyticsReporter_1 = require("./infra/SearchAnalyticsReporter");
const PagesAnalyticsReporter_1 = require("./infra/PagesAnalyticsReporter");
const ChatAnalyticsReporter_1 = require("./infra/ChatAnalyticsReporter");
/**
 * Maintained for backwards compatibility with older versions of the library
 * provideAnalytics uses the AnalyticsConfig, AnalyticsService, and AnalyticsReporter aliases
 * for SearchAnalyticsConfig, SearchAnalyticsService, and SearchAnalyticsReporter
 *
 * @remarks
 * Returns an analytics service instance.
 *
 * @param config - The analytics config
 *
 * @public
 */
function provideAnalytics(config) {
    const httpRequester = new HttpRequester_1.HttpRequester();
    return new AnalyticsReporter_1.AnalyticsReporter(config, httpRequester);
}
exports.provideAnalytics = provideAnalytics;
/**
 * Provides a Search Analytics service given a Search specific config
 *
 * @remarks
 * Returns an analytics service instance.
 *
 * @param config - The Search analytics config
 *
 * @public
 */
function provideSearchAnalytics(config) {
    const httpRequester = new HttpRequester_1.HttpRequester();
    return new SearchAnalyticsReporter_1.SearchAnalyticsReporter(config, httpRequester);
}
exports.provideSearchAnalytics = provideSearchAnalytics;
/**
 * Provides a Pages Analytics service given a Pages specific config
 *
 * @remarks
 * Returns an analytics service instance.
 *
 * @param config - The Pages analytics config
 *
 * @public
 */
function providePagesAnalytics(config) {
    const httpRequester = new HttpRequester_1.HttpRequester();
    return new PagesAnalyticsReporter_1.PagesAnalyticsReporter(config, httpRequester);
}
exports.providePagesAnalytics = providePagesAnalytics;
/**
 * Provides a Conversion Tracking service given an optional debugging parameter
 *
 * @remarks
 * Returns a conversion tracking service instance
 *
 * @param debug - turn on console log debugging for tracked events
 *
 * @public
 */
function provideConversionTrackingAnalytics(debug) {
    const httpRequester = new HttpRequester_1.HttpRequester();
    return new ConversionTrackingReporter_1.ConversionTrackingReporter(httpRequester, debug);
}
exports.provideConversionTrackingAnalytics = provideConversionTrackingAnalytics;
/**
 * Provides a Chat Analytics service
 *
 * @remarks
 * Returns a conversion tracking service instance
 *
 * @public
 */
function provideChatAnalytics(config) {
    const httpRequester = new HttpRequester_1.HttpRequester();
    return new ChatAnalyticsReporter_1.ChatAnalyticsReporter(config, httpRequester);
}
exports.provideChatAnalytics = provideChatAnalytics;
__exportStar(require("./models"), exports);
__exportStar(require("./utils"), exports);
//# sourceMappingURL=index.js.map