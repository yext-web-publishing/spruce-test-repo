"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversionTrackingReporter = void 0;
const models_1 = require("../models");
const constants_1 = require("../models/constants");
const CalculateSeed_1 = require("./CalculateSeed");
const endpointProviders_1 = require("../utils/endpointProviders");
class ConversionTrackingReporter {
    constructor(httpRequesterService, debug) {
        this.httpRequesterService = httpRequesterService;
        this.debug = debug;
        this._debug = debug;
        this._conversionTrackingEndpoint = (0, endpointProviders_1.getConversionTrackingEndpoint)();
        this._conversionTrackingListingsEndpoint = (0, endpointProviders_1.getConversionTrackingListingsEndpoint)();
    }
    /**
     * Prints event details to the console for debugging of analytics events as they fire.
     * @param event - the details of the event that will be printed
     * @param type - the type of the event that was tracked
     */
    printEvent(event, type) {
        if (!this._debug)
            return;
        console.log(`%c[YextAnalytics]%c- Tracked ${type} event: ${event}`, 'background: white; color: blue;', '');
    }
    handleRequest(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.httpRequesterService.get(url.toString());
            if (res.status !== 200 && !(res.type === 'opaqueredirect' || res.type === 'opaque')) {
                const errorMessage = yield res.text();
                throw new Error(errorMessage);
            }
        });
    }
    static formatBaseEvent(event, params) {
        params.set(models_1.COOKIE_PARAM, event.cookieId);
        if (event.referrer)
            params.set('referrer', event.referrer);
        params.set('v', (0, CalculateSeed_1.calculateSeed)().toString());
        params.set('location', event.location);
    }
    /** {@inheritDoc ConversionTrackingService.trackConversion} */
    trackConversion(event) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = new URL(this._conversionTrackingEndpoint);
            const params = new URLSearchParams();
            params.set('cid', event.cid);
            if (event.cv)
                params.set('cv', event.cv);
            ConversionTrackingReporter.formatBaseEvent(event, params);
            url.search = params.toString();
            yield this.handleRequest(url.toString());
            this.printEvent(event.cid, 'Conversion');
        });
    }
    /** {@inheritDoc ConversionTrackingService.trackListings} */
    trackListings(event) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = new URL(this._conversionTrackingListingsEndpoint);
            const params = new URLSearchParams();
            params.set(constants_1.LISTINGS_SOURCE_PARAM, event.source);
            ConversionTrackingReporter.formatBaseEvent(event, params);
            url.search = params.toString();
            yield this.handleRequest(url.toString());
            this.printEvent(event.source, 'Listings Click');
        });
    }
    /** {@inheritDoc ConversionTrackingService.setDebugEnabled} */
    setDebugEnabled(enabled) {
        this._debug = enabled;
    }
}
exports.ConversionTrackingReporter = ConversionTrackingReporter;
//# sourceMappingURL=ConversionTrackingReporter.js.map