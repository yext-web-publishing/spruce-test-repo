"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatAnalyticsReporter = void 0;
const getOrSetupSessionId_1 = require("../utils/getOrSetupSessionId");
const endpointProviders_1 = require("../utils/endpointProviders");
/**
 * A class to report chat analytics data. Uses the provided API key, environment,
 * and partition to determine the endpoint for reporting events.
 *
 * @public
 */
class ChatAnalyticsReporter {
    constructor({ apiKey, env, region = 'US', endpoint, sessionTrackingEnabled = region === 'US' }, httpRequesterService) {
        this.httpRequesterService = httpRequesterService;
        this.apiKey = apiKey;
        this.sessionTrackingEnabled = sessionTrackingEnabled;
        this.endpoint = endpoint !== null && endpoint !== void 0 ? endpoint : (0, endpointProviders_1.getChatEndpoint)(region, env);
    }
    /**
     * Report an event to the chat analytics API.
     * @param event - The event to report.
     * @returns A promise that resolves to the response from the API.
     * @example
     *
     * ```ts
     * reporter.report({
     *   action: 'DIRECTIONS',
     *   chat: {
     *     botId: 'davish-playground',
     *   },
     * });
     * // Response
     * {
     *   id: '12345',
     * }
     * ```
     */
    report(event) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const headers = {
                Authorization: `KEY ${this.apiKey}`,
                'Content-Type': 'application/json',
            };
            const sessionId = this.sessionTrackingEnabled
                ? ((_b = (_a = event.sessionId) !== null && _a !== void 0 ? _a : (0, getOrSetupSessionId_1.getOrSetupSessionId)()) !== null && _b !== void 0 ? _b : undefined)
                : undefined;
            const res = yield this.httpRequesterService.post(this.endpoint, Object.assign(Object.assign({}, event), { sessionId }), headers);
            if (!res.ok) {
                const body = yield res.json();
                let errorMessage = `Events API responded with ${res.status}: ${res.statusText}`;
                (_c = body.errors) === null || _c === void 0 ? void 0 : _c.forEach(e => errorMessage += `\nError: ${e}.`);
                throw new Error(errorMessage);
            }
            const resJson = yield res.json();
            return resJson;
        });
    }
}
exports.ChatAnalyticsReporter = ChatAnalyticsReporter;
//# sourceMappingURL=ChatAnalyticsReporter.js.map