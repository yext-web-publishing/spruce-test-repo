"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PagesAnalyticsReporter = void 0;
const constants_1 = require("../models/constants");
const models_1 = require("../models");
const models_2 = require("../models");
const CalculateSeed_1 = require("./CalculateSeed");
const ConversionTrackingReporter_1 = require("./ConversionTrackingReporter");
const endpointProviders_1 = require("../utils/endpointProviders");
const PRODUCT_NAME = 'sites';
var urlParamNames;
(function (urlParamNames) {
    urlParamNames["BusinessId"] = "businessids";
    urlParamNames["Product"] = "product";
    urlParamNames["SiteId"] = "siteId";
    urlParamNames["IsStaging"] = "isStaging";
    urlParamNames["CacheBuster"] = "v";
    urlParamNames["UrlPath"] = "pageurl";
    urlParamNames["Referrer"] = "pagesReferrer";
    urlParamNames["EventType"] = "eventType";
    urlParamNames["PageSetId"] = "pageSetId";
    urlParamNames["EntityInternalId"] = "ids";
    urlParamNames["DirectoryId"] = "directoryId";
    urlParamNames["SearchId"] = "searchId";
    urlParamNames["StaticPageId"] = "staticPageId";
    urlParamNames["PageType"] = "pageType";
    urlParamNames["VisitorId"] = "visitorId";
    urlParamNames["VisitorMethod"] = "visitorIdMethod";
    urlParamNames["PageDomain"] = "pageDomain";
})(urlParamNames || (urlParamNames = {}));
const eventTypeNameMapping = new Map();
eventTypeNameMapping.set(models_1.DefaultPagesEventNames.PageView, 'pageview');
eventTypeNameMapping.set(models_1.DefaultPagesEventNames.CTA, 'calltoactionclick');
eventTypeNameMapping.set(models_1.DefaultPagesEventNames.PhoneCall, 'phonecall');
eventTypeNameMapping.set(models_1.DefaultPagesEventNames.DrivingDirection, 'drivingdirection');
eventTypeNameMapping.set(models_1.DefaultPagesEventNames.Website, 'clicktowebsite');
function getEventName(name) {
    const mappedName = eventTypeNameMapping.get(name);
    if (typeof mappedName === 'string') {
        return mappedName;
    }
    return name;
}
/**
 * Responsible for reporting Pages Analytics Events
 *
 * @public
 */
class PagesAnalyticsReporter {
    constructor(config, httpRequesterService) {
        this.config = config;
        this.httpRequesterService = httpRequesterService;
        this.setVisitor(config.visitor);
        this._debug = config.debug;
        this._conversionTracker = new ConversionTrackingReporter_1.ConversionTrackingReporter(this.httpRequesterService, this._debug);
        this._hasTrackedListings = false;
        this._region = config.region;
        try {
            this._pageUrl = new URL(config.pageUrl);
        }
        catch (_a) {
            throw new Error(`pageUrl property must be a valid URL, was: '${config.pageUrl}'`);
        }
        if (config.pageDomain) {
            try {
                this._pageDomain = new URL(config.pageDomain);
            }
            catch (_b) {
                console.warn(`pageDomain '${config.pageDomain}' is not a valid URL.`, 'It will not be included as a query param sent to the API.');
            }
        }
    }
    /**
     * Prints event details to the console for debugging of analytics events as they fire.
     * @param event - the PagesAnalyticsEvent that will be printed
     */
    printEvent(event) {
        if (!this._debug)
            return;
        console.log(`%c[YextAnalytics]%c- Tracked Pages event: ${event.eventType}`, 'background: white; color: blue;', '');
    }
    /**
     * Converts config and PagesAnalyticsEvent into url parameters for sending to API
     * @param event - PagesAnalyticsEvent to transform into URLSearchParams
     */
    urlParameters(event) {
        const params = new URLSearchParams();
        params.set(urlParamNames.BusinessId, this.config.businessId.toString());
        params.set(urlParamNames.Product, PRODUCT_NAME);
        params.set(urlParamNames.SiteId, this.config.siteId.toString());
        params.set(urlParamNames.IsStaging, (!this.config.production).toString());
        params.set(urlParamNames.EventType, getEventName(event.eventType));
        params.set(urlParamNames.PageType, this.config.pageType.name);
        if (this.config.pageType.name === 'entity') {
            params.set(urlParamNames.PageSetId, this.config.pageType.pageSetId);
            params.set(urlParamNames.EntityInternalId, this.config.pageType.id.toString());
        }
        else if (this.config.pageType.name === 'directory') {
            params.set(urlParamNames.DirectoryId, this.config.pageType.directoryId);
            params.set(urlParamNames.EntityInternalId, this.config.pageType.id.toString());
        }
        else if (this.config.pageType.name === 'locator') {
            params.set(urlParamNames.SearchId, this.config.pageType.searchId);
        }
        else if (urlParamNames.StaticPageId in this.config.pageType) {
            params.set(urlParamNames.StaticPageId, this.config.pageType.staticPageId);
        }
        params.set(urlParamNames.CacheBuster, (0, CalculateSeed_1.calculateSeed)().toString());
        params.set(urlParamNames.UrlPath, this._pageUrl.pathname);
        params.set(urlParamNames.Referrer, this.config.referrer);
        this._pageDomain && params.set(urlParamNames.PageDomain, this._pageDomain.toString());
        if (this._conversionTrackingEnabled && this._cookieID) {
            params.set(constants_1.COOKIE_PARAM, this._cookieID);
        }
        if (this._visitor) {
            params.set(urlParamNames.VisitorId, this._visitor.id);
            if (this._visitor.idMethod)
                params.set(urlParamNames.VisitorMethod, this._visitor.idMethod);
        }
        return params;
    }
    /** {@inheritDoc PagesAnalyticsService.pageView} */
    pageView() {
        return __awaiter(this, void 0, void 0, function* () {
            const sourceValue = this._pageUrl.searchParams.get(constants_1.LISTINGS_SOURCE_PARAM);
            if (this._conversionTrackingEnabled
                && this._cookieID
                && !this._hasTrackedListings
                && sourceValue) {
                yield this._conversionTracker.trackListings({
                    cookieId: this._cookieID,
                    location: this._pageUrl.toString(),
                    source: sourceValue,
                });
                this._hasTrackedListings = true;
            }
            return this.track(models_2.PageViewEvent);
        });
    }
    /** {@inheritDoc PagesAnalyticsService.setDebugEnabled} */
    track(event, conversionInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            /** TODO: need to evaluate that the event name is valid, I think there are restrictions in the characters
              * that are accepted
              */
            const endpoint = (0, endpointProviders_1.getPagesEndpoint)(this._region, this._conversionTrackingEnabled);
            const url = new URL(endpoint);
            url.search = this.urlParameters(event).toString();
            const res = yield this.httpRequesterService.get(url.toString());
            // modern browsers won't let us access the status because of CORS
            // https://developer.mozilla.org/en-US/docs/Web/API/Request/mode
            if (res.status !== 200 && !(res.type == 'opaque' || res.type == 'opaqueredirect')) {
                const errorMessage = yield res.text();
                throw new Error(errorMessage);
            }
            this.printEvent(event);
            if (this._conversionTrackingEnabled && this._cookieID && conversionInfo) {
                yield this._conversionTracker.trackConversion({
                    cid: conversionInfo.cid,
                    cv: conversionInfo.cv,
                    cookieId: this._cookieID,
                    location: this._pageUrl.toString(),
                });
            }
        });
    }
    /** {@inheritDoc PagesAnalyticsService.setDebugEnabled} */
    setDebugEnabled(enabled) {
        this._debug = enabled;
        if (this._conversionTracker) {
            this._conversionTracker.setDebugEnabled(enabled);
        }
    }
    /** {@inheritDoc PagesAnalyticsService.setVisitor} */
    setVisitor(visitor) {
        this._visitor = visitor;
    }
    /** {@inheritDoc PagesAnalyticsService.setConversionTrackingEnabled} */
    setConversionTrackingEnabled(enabled, cookieId) {
        this._conversionTrackingEnabled = enabled;
        this._cookieID = cookieId;
    }
}
exports.PagesAnalyticsReporter = PagesAnalyticsReporter;
//# sourceMappingURL=PagesAnalyticsReporter.js.map