"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchAnalyticsReporter = void 0;
const endpointProviders_1 = require("../utils/endpointProviders");
/**
 * Responsible for reporting Analytics events.
 *
 * @public
 */
class SearchAnalyticsReporter {
    constructor(config, httpRequesterService) {
        this.config = config;
        this.httpRequesterService = httpRequesterService;
        this.setVisitor(config.visitor);
        this._debug = config.debug;
        this._endpoint = (0, endpointProviders_1.getSearchEndpoint)(this.config.businessId, this.config.region, this.config.env, this.config.domain);
    }
    /**
     * Prints event details to the console for debugging of analytics events as they fire.
     * @param event - the SearchAnalyticsEvent that will be printed
     */
    printEvent(event) {
        if (!this._debug)
            return;
        console.log(`%c[YextAnalytics]%c- Tracked Search event: ${event.type}`, 'background: white; color: blue;', '');
    }
    /** {@inheritDoc AnalyticsService.report} */
    report(event, additionalRequestAttributes) {
        return __awaiter(this, void 0, void 0, function* () {
            const { type } = event, eventData = __rest(event, ["type"]);
            const data = Object.assign(Object.assign({ eventType: type, businessId: this.config.businessId, experienceKey: this.config.experienceKey, experienceVersion: this.config.experienceVersion }, (this._visitor && { visitor: Object.assign({}, this._visitor) })), SearchAnalyticsReporter._formatForApi(eventData));
            const res = yield this.httpRequesterService.post(this._endpoint, Object.assign({ data }, additionalRequestAttributes));
            if (res.status !== 200) {
                const errorMessage = yield res.text();
                throw new Error(errorMessage);
            }
            this.printEvent(event);
        });
    }
    /** {@inheritDoc AnalyticsService.setVisitor} */
    setVisitor(visitor) {
        this._visitor = visitor;
    }
    /**
     * Formats the event data for the api which includes adapting verticalKey to verticalConfigId.
     *
     * @param event - The data to format.
     * @returns The formatted data.
     */
    static _formatForApi(event) {
        const transformedEvent = Object.assign({}, event);
        if (transformedEvent.verticalKey) {
            transformedEvent.verticalConfigId = transformedEvent.verticalKey;
            delete transformedEvent.verticalKey;
        }
        return transformedEvent;
    }
    /** {@inheritDoc SearchAnalyticsService.setDebugEnabled} */
    setDebugEnabled(enabled) {
        this._debug = enabled;
    }
}
exports.SearchAnalyticsReporter = SearchAnalyticsReporter;
//# sourceMappingURL=SearchAnalyticsReporter.js.map