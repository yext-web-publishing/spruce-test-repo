import { ChatEventPayLoad, EventAPIResponse } from '../models/chat';
import { ChatAnalyticsConfig } from '../models/config/ChatAnalyticsConfig';
import { HttpRequesterService } from '../services';
/**
 * A class to report chat analytics data. Uses the provided API key, environment,
 * and partition to determine the endpoint for reporting events.
 *
 * @public
 */
export declare class ChatAnalyticsReporter {
    private httpRequesterService;
    /** A Yext API Key with access to Analytics */
    private readonly apiKey;
    /**
     * The endpoint to report events to, inferred by the env and region
     * when the endpoint field from config is not provided.
     */
    private readonly endpoint;
    /** Whether to enable session tracking for analytics events */
    private readonly sessionTrackingEnabled;
    constructor({ apiKey, env, region, endpoint, sessionTrackingEnabled }: ChatAnalyticsConfig, httpRequesterService: HttpRequesterService);
    /**
     * Report an event to the chat analytics API.
     * @param event - The event to report.
     * @returns A promise that resolves to the response from the API.
     * @example
     *
     * ```ts
     * reporter.report({
     *   action: 'DIRECTIONS',
     *   chat: {
     *     botId: 'davish-playground',
     *   },
     * });
     * // Response
     * {
     *   id: '12345',
     * }
     * ```
     */
    report(event: ChatEventPayLoad): Promise<EventAPIResponse>;
}
//# sourceMappingURL=ChatAnalyticsReporter.d.ts.map