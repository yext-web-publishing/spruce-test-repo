import { ConversionDetails } from '../models';
import { HttpRequesterService, PagesAnalyticsService } from '../services';
import { PagesAnalyticsConfig, Visitor } from '../models';
import { PagesAnalyticsEvent } from '../models';
/**
 * Responsible for reporting Pages Analytics Events
 *
 * @public
 */
export declare class PagesAnalyticsReporter implements PagesAnalyticsService {
    private config;
    private httpRequesterService;
    private _visitor;
    private _debug;
    private _conversionTrackingEnabled;
    private _cookieID;
    private readonly _conversionTracker;
    private _hasTrackedListings;
    private readonly _pageUrl;
    private readonly _pageDomain;
    private readonly _region;
    constructor(config: PagesAnalyticsConfig, httpRequesterService: HttpRequesterService);
    /**
     * Prints event details to the console for debugging of analytics events as they fire.
     * @param event - the PagesAnalyticsEvent that will be printed
     */
    private printEvent;
    /**
     * Converts config and PagesAnalyticsEvent into url parameters for sending to API
     * @param event - PagesAnalyticsEvent to transform into URLSearchParams
     */
    private urlParameters;
    /** {@inheritDoc PagesAnalyticsService.pageView} */
    pageView(): Promise<void>;
    /** {@inheritDoc PagesAnalyticsService.setDebugEnabled} */
    track(event: PagesAnalyticsEvent, conversionInfo?: ConversionDetails): Promise<void>;
    /** {@inheritDoc PagesAnalyticsService.setDebugEnabled} */
    setDebugEnabled(enabled: boolean): void;
    /** {@inheritDoc PagesAnalyticsService.setVisitor} */
    setVisitor(visitor: Visitor | undefined): void;
    /** {@inheritDoc PagesAnalyticsService.setConversionTrackingEnabled} */
    setConversionTrackingEnabled(enabled: boolean, cookieId: string): void;
}
//# sourceMappingURL=PagesAnalyticsReporter.d.ts.map